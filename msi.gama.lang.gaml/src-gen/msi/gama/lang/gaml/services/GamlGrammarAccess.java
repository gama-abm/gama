/*
 * generated by Xtext
 */
package msi.gama.lang.gaml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GamlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Entry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandaloneModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStandaloneExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStandaloneBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStandaloneExperimentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///**------------------------------------------------------------------------
		// * Entries of the grammar
		//-------------------------------------------------------------------------*/
		//Entry:
		//    ->StandaloneModel | StandaloneExpression | StandaloneBlock | StandaloneExperiment;
		@Override public ParserRule getRule() { return rule; }
		
		//->StandaloneModel | StandaloneExpression | StandaloneBlock | StandaloneExperiment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//->StandaloneModel
		public RuleCall getStandaloneModelParserRuleCall_0() { return cStandaloneModelParserRuleCall_0; }
		
		//StandaloneExpression
		public RuleCall getStandaloneExpressionParserRuleCall_1() { return cStandaloneExpressionParserRuleCall_1; }
		
		//StandaloneBlock
		public RuleCall getStandaloneBlockParserRuleCall_2() { return cStandaloneBlockParserRuleCall_2; }
		
		//StandaloneExperiment
		public RuleCall getStandaloneExperimentParserRuleCall_3() { return cStandaloneExperimentParserRuleCall_3; }
	}
	public class StandaloneBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.StandaloneBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c__synthetic__Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * StandaloneBlock -- allows to compile inline actions at runtime
		//-------------------------------------------------------------------------*/
		//StandaloneBlock:
		//    '__synthetic__' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'__synthetic__' block=Block
		public Group getGroup() { return cGroup; }
		
		//'__synthetic__'
		public Keyword get__synthetic__Keyword_0() { return c__synthetic__Keyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class StandaloneExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.StandaloneExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * StandaloneExpression -- allows to compile inline expressions at runtime
		//-------------------------------------------------------------------------*/
		//StandaloneExpression:
		//    name=ID "<-" expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "<-" expr=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class StandaloneExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.StandaloneExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_ExperimentParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameValid_IDParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cModelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportURIAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_1_0 = (RuleCall)cImportURIAssignment_2_1.eContents().get(0);
		private final Assignment cFacetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFacetsFacetParserRuleCall_3_0 = (RuleCall)cFacetsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_4_0_0 = (RuleCall)cBlockAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * StandaloneExperiment -- allows to compile experiment files
		//-------------------------------------------------------------------------*/
		//StandaloneExperiment:
		//    key=K_Experiment name=(Valid_ID | STRING) ('model:' importURI=STRING)? (facets+=Facet)*
		//    (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Experiment name=(Valid_ID | STRING) ('model:' importURI=STRING)? (facets+=Facet)*
		//(block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Experiment
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Experiment
		public RuleCall getKeyK_ExperimentParserRuleCall_0_0() { return cKeyK_ExperimentParserRuleCall_0_0; }
		
		//name=(Valid_ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(Valid_ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0_0() { return cNameValid_IDParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//('model:' importURI=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'model:'
		public Keyword getModelKeyword_2_0() { return cModelKeyword_2_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2_1() { return cImportURIAssignment_2_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_1_0() { return cImportURISTRINGTerminalRuleCall_2_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_3() { return cFacetsAssignment_3; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_3_0() { return cFacetsFacetParserRuleCall_3_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//block=Block
		public Assignment getBlockAssignment_4_0() { return cBlockAssignment_4_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0_0() { return cBlockBlockParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class StandaloneModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.StandaloneModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockB_ModelParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * StandaloneModel -- allows to compile model files
		//-------------------------------------------------------------------------*/
		//StandaloneModel:
		//    (pragmas+=Pragma)* 'model' name=ID (imports+=Import)* block=B_Model;
		@Override public ParserRule getRule() { return rule; }
		
		//(pragmas+=Pragma)* 'model' name=ID (imports+=Import)* block=B_Model
		public Group getGroup() { return cGroup; }
		
		//(pragmas+=Pragma)*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//block=B_Model
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//B_Model
		public RuleCall getBlockB_ModelParserRuleCall_4_0() { return cBlockB_ModelParserRuleCall_4_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Models' specific components: imports and pragmas
		//-------------------------------------------------------------------------*/
		//Import:
		//    'import' importURI=STRING ("as" name=Valid_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING ("as" name=Valid_ID)?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
		
		//("as" name=Valid_ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_2_1_0() { return cNameValid_IDParserRuleCall_2_1_0; }
	}
	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Pragma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPluginsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPluginsExpressionListParserRuleCall_1_1_1_0 = (RuleCall)cPluginsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		// // must be named importURI
		//Pragma:
		//    '@' (name=ID ('[' plugins=ExpressionList? ']')?);
		@Override public ParserRule getRule() { return rule; }
		
		//'@' (name=ID ('[' plugins=ExpressionList? ']')?)
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//(name=ID ('[' plugins=ExpressionList? ']')?)
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('[' plugins=ExpressionList? ']')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//plugins=ExpressionList?
		public Assignment getPluginsAssignment_1_1_1() { return cPluginsAssignment_1_1_1; }
		
		//ExpressionList
		public RuleCall getPluginsExpressionListParserRuleCall_1_1_1_0() { return cPluginsExpressionListParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Blocks. An ordered list of statements inside curly brackets.
		// * Some are specialized and accept only certain statements
		// -------------------------------------------------------------------------*/
		//Block:
		//    {Block} '{' ((statements+=Statement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' ((statements+=Statement)* '}')
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//((statements+=Statement)* '}')
		public Group getGroup_2() { return cGroup_2; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}
	public class B_ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.B_Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsS_SectionParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//B_Model returns Block:
		//    {Block} (statements+=(S_Section))*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} (statements+=(S_Section))*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(statements+=(S_Section))*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//(S_Section)
		public RuleCall getStatementsS_SectionParserRuleCall_1_0() { return cStatementsS_SectionParserRuleCall_1_0; }
	}
	public class B_SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.B_Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cStatementsAlternatives_2_0 = (Alternatives)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cStatementsS_DefaultParserRuleCall_2_0_0 = (RuleCall)cStatementsAlternatives_2_0.eContents().get(0);
		private final RuleCall cStatementsS_MatchParserRuleCall_2_0_1 = (RuleCall)cStatementsAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//B_Switch returns Block:
		//    {Block} '{' (statements+=(S_Default | S_Match))* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (statements+=(S_Default | S_Match))* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(statements+=(S_Default | S_Match))*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//(S_Default | S_Match)
		public Alternatives getStatementsAlternatives_2_0() { return cStatementsAlternatives_2_0; }
		
		//S_Default
		public RuleCall getStatementsS_DefaultParserRuleCall_2_0_0() { return cStatementsS_DefaultParserRuleCall_2_0_0; }
		
		//S_Match
		public RuleCall getStatementsS_MatchParserRuleCall_2_0_1() { return cStatementsS_MatchParserRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class B_DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.B_Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsS_DisplayLayerParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//B_Display returns Block:
		//    {Block} '{' (statements+=S_DisplayLayer)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' (statements+=S_DisplayLayer)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(statements+=S_DisplayLayer)*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//S_DisplayLayer
		public RuleCall getStatementsS_DisplayLayerParserRuleCall_2_0() { return cStatementsS_DisplayLayerParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cS_DeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cAlternatives_0.eContents().get(1);
		private final RuleCall cS_AssignmentParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cS_SwitchParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cS_BreakParserRuleCall_0_1_2 = (RuleCall)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cS_DoParserRuleCall_0_1_3 = (RuleCall)cAlternatives_0_1.eContents().get(3);
		private final RuleCall cS_ReturnParserRuleCall_0_1_4 = (RuleCall)cAlternatives_0_1.eContents().get(4);
		private final RuleCall cS_SolveParserRuleCall_0_1_5 = (RuleCall)cAlternatives_0_1.eContents().get(5);
		private final RuleCall cS_IfParserRuleCall_0_1_6 = (RuleCall)cAlternatives_0_1.eContents().get(6);
		private final RuleCall cS_TryParserRuleCall_0_1_7 = (RuleCall)cAlternatives_0_1.eContents().get(7);
		private final RuleCall cS_1Expr_Facets_BlockOrEndParserRuleCall_0_1_8 = (RuleCall)cAlternatives_0_1.eContents().get(8);
		private final RuleCall cS_EquationsParserRuleCall_0_1_9 = (RuleCall)cAlternatives_0_1.eContents().get(9);
		private final RuleCall cS_DisplayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * General statements
		//-------------------------------------------------------------------------*/
		//Statement:
		//    (=> S_Declaration |
		//    ((=> S_Assignment |  S_Switch | S_Break | S_Do | S_Return | S_Solve | S_If | S_Try | S_1Expr_Facets_BlockOrEnd /*| S_Other */|  S_Equations)))
		//    | S_Display ;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> S_Declaration |
		//((=> S_Assignment |  S_Switch | S_Break | S_Do | S_Return | S_Solve | S_If | S_Try | S_1Expr_Facets_BlockOrEnd /*| S_Other */|  S_Equations)))
		//| S_Display
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(=> S_Declaration |
		//((=> S_Assignment |  S_Switch | S_Break | S_Do | S_Return | S_Solve | S_If | S_Try | S_1Expr_Facets_BlockOrEnd /*| S_Other */|  S_Equations)))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> S_Declaration
		public RuleCall getS_DeclarationParserRuleCall_0_0() { return cS_DeclarationParserRuleCall_0_0; }
		
		//((=> S_Assignment |  S_Switch | S_Break | S_Do | S_Return | S_Solve | S_If | S_Try | S_1Expr_Facets_BlockOrEnd /*| S_Other */|  S_Equations))
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//=> S_Assignment
		public RuleCall getS_AssignmentParserRuleCall_0_1_0() { return cS_AssignmentParserRuleCall_0_1_0; }
		
		//S_Switch
		public RuleCall getS_SwitchParserRuleCall_0_1_1() { return cS_SwitchParserRuleCall_0_1_1; }
		
		//S_Break
		public RuleCall getS_BreakParserRuleCall_0_1_2() { return cS_BreakParserRuleCall_0_1_2; }
		
		//S_Do
		public RuleCall getS_DoParserRuleCall_0_1_3() { return cS_DoParserRuleCall_0_1_3; }
		
		//S_Return
		public RuleCall getS_ReturnParserRuleCall_0_1_4() { return cS_ReturnParserRuleCall_0_1_4; }
		
		//S_Solve
		public RuleCall getS_SolveParserRuleCall_0_1_5() { return cS_SolveParserRuleCall_0_1_5; }
		
		//S_If
		public RuleCall getS_IfParserRuleCall_0_1_6() { return cS_IfParserRuleCall_0_1_6; }
		
		//S_Try
		public RuleCall getS_TryParserRuleCall_0_1_7() { return cS_TryParserRuleCall_0_1_7; }
		
		//S_1Expr_Facets_BlockOrEnd
		public RuleCall getS_1Expr_Facets_BlockOrEndParserRuleCall_0_1_8() { return cS_1Expr_Facets_BlockOrEndParserRuleCall_0_1_8; }
		
		//S_Equations
		public RuleCall getS_EquationsParserRuleCall_0_1_9() { return cS_EquationsParserRuleCall_0_1_9; }
		
		//S_Display
		public RuleCall getS_DisplayParserRuleCall_1() { return cS_DisplayParserRuleCall_1; }
	}
	public class S_1Expr_Facets_BlockOrEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_1Expr_Facets_BlockOrEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_1Expr_Facets_BlockOrEndParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//S_1Expr_Facets_BlockOrEnd returns Statement:
		//    key=K_1Expr_Facets_BlockOrEnd (expr=Expression) (facets+=Facet)* (block=Block | ";");
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_1Expr_Facets_BlockOrEnd (expr=Expression) (facets+=Facet)* (block=Block | ";")
		public Group getGroup() { return cGroup; }
		
		//key=K_1Expr_Facets_BlockOrEnd
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_1Expr_Facets_BlockOrEnd
		public RuleCall getKeyK_1Expr_Facets_BlockOrEndParserRuleCall_0_0() { return cKeyK_1Expr_Facets_BlockOrEndParserRuleCall_0_0; }
		
		//(expr=Expression)
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=Block | ";")
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_GlobalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cS_SpeciesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cS_ExperimentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///**------------------------------------------------------------------------
		// * Global statements
		//-------------------------------------------------------------------------*/
		//S_Section returns Statement:
		//    S_Global | S_Species | S_Experiment;
		@Override public ParserRule getRule() { return rule; }
		
		//S_Global | S_Species | S_Experiment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//S_Global
		public RuleCall getS_GlobalParserRuleCall_0() { return cS_GlobalParserRuleCall_0; }
		
		//S_Species
		public RuleCall getS_SpeciesParserRuleCall_1() { return cS_SpeciesParserRuleCall_1; }
		
		//S_Experiment
		public RuleCall getS_ExperimentParserRuleCall_2() { return cS_ExperimentParserRuleCall_2; }
	}
	public class S_GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyGlobalKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cFacetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFacetsFacetParserRuleCall_1_0 = (RuleCall)cFacetsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_2_0_0 = (RuleCall)cBlockAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//S_Global:
		//    key="global" (facets+=Facet)* (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key="global" (facets+=Facet)* (block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key="global"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"global"
		public Keyword getKeyGlobalKeyword_0_0() { return cKeyGlobalKeyword_0_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_1() { return cFacetsAssignment_1; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_1_0() { return cFacetsFacetParserRuleCall_1_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//block=Block
		public Assignment getBlockAssignment_2_0() { return cBlockAssignment_2_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0_0() { return cBlockBlockParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class S_SpeciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Species");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_SpeciesParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//S_Species:
		//    key=K_Species name=ID (facets+=Facet)* (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Species name=ID (facets+=Facet)* (block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Species
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Species
		public RuleCall getKeyK_SpeciesParserRuleCall_0_0() { return cKeyK_SpeciesParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_ExperimentParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameValid_IDParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//S_Experiment:
		//    key=K_Experiment name=(Valid_ID | STRING) (facets+=Facet)* (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Experiment name=(Valid_ID | STRING) (facets+=Facet)* (block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Experiment
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Experiment
		public RuleCall getKeyK_ExperimentParserRuleCall_0_0() { return cKeyK_ExperimentParserRuleCall_0_0; }
		
		//name=(Valid_ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(Valid_ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0_0() { return cNameValid_IDParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_DoParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAbstractRefParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Special statements: do
		//-------------------------------------------------------------------------*/
		//S_Do:
		//    key=K_Do expr=AbstractRef (facets+=Facet)* (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Do expr=AbstractRef (facets+=Facet)* (block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Do
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Do
		public RuleCall getKeyK_DoParserRuleCall_0_0() { return cKeyK_DoParserRuleCall_0_0; }
		
		//expr=AbstractRef
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AbstractRef
		public RuleCall getExprAbstractRefParserRuleCall_1_0() { return cExprAbstractRefParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyLoopKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Control statements : loop, if, switch/match/default, try/catch, break, return
		//-------------------------------------------------------------------------*/
		//S_Loop:
		//    key="loop" (name=ID) (facets+=Facet)* block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//key="loop" (name=ID) (facets+=Facet)* block=Block
		public Group getGroup() { return cGroup; }
		
		//key="loop"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"loop"
		public Keyword getKeyLoopKeyword_0_0() { return cKeyLoopKeyword_0_0; }
		
		//(name=ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class S_IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyIfKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cElseAlternatives_3_1_0 = (Alternatives)cElseAssignment_3_1.eContents().get(0);
		private final RuleCall cElseS_IfParserRuleCall_3_1_0_0 = (RuleCall)cElseAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cElseBlockParserRuleCall_3_1_0_1 = (RuleCall)cElseAlternatives_3_1_0.eContents().get(1);
		
		//S_If:
		//    key='if' expr=Expression block=Block (->'else' else=(S_If | Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//key='if' expr=Expression block=Block (->'else' else=(S_If | Block))?
		public Group getGroup() { return cGroup; }
		
		//key='if'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'if'
		public Keyword getKeyIfKeyword_0_0() { return cKeyIfKeyword_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
		
		//(->'else' else=(S_If | Block))?
		public Group getGroup_3() { return cGroup_3; }
		
		//->'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//else=(S_If | Block)
		public Assignment getElseAssignment_3_1() { return cElseAssignment_3_1; }
		
		//(S_If | Block)
		public Alternatives getElseAlternatives_3_1_0() { return cElseAlternatives_3_1_0; }
		
		//S_If
		public RuleCall getElseS_IfParserRuleCall_3_1_0_0() { return cElseS_IfParserRuleCall_3_1_0_0; }
		
		//Block
		public RuleCall getElseBlockParserRuleCall_3_1_0_1() { return cElseBlockParserRuleCall_3_1_0_1; }
	}
	public class S_TryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Try");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyTryKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCatchAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCatchBlockParserRuleCall_2_1_0 = (RuleCall)cCatchAssignment_2_1.eContents().get(0);
		
		//S_Try:
		//    key='try' block=Block (->'catch' catch=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//key='try' block=Block (->'catch' catch=Block)?
		public Group getGroup() { return cGroup; }
		
		//key='try'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'try'
		public Keyword getKeyTryKeyword_0_0() { return cKeyTryKeyword_0_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//(->'catch' catch=Block)?
		public Group getGroup_2() { return cGroup_2; }
		
		//->'catch'
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }
		
		//catch=Block
		public Assignment getCatchAssignment_2_1() { return cCatchAssignment_2_1; }
		
		//Block
		public RuleCall getCatchBlockParserRuleCall_2_1_0() { return cCatchBlockParserRuleCall_2_1_0; }
	}
	public class S_SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeySwitchKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockB_SwitchParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//S_Switch:
		//    key='switch' expr=Expression block=B_Switch;
		@Override public ParserRule getRule() { return rule; }
		
		//key='switch' expr=Expression block=B_Switch
		public Group getGroup() { return cGroup; }
		
		//key='switch'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'switch'
		public Keyword getKeySwitchKeyword_0_0() { return cKeySwitchKeyword_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//block=B_Switch
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//B_Switch
		public RuleCall getBlockB_SwitchParserRuleCall_2_0() { return cBlockB_SwitchParserRuleCall_2_0; }
	}
	public class S_MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0 = (Alternatives)cKeyAssignment_0.eContents().get(0);
		private final Keyword cKeyMatchKeyword_0_0_0 = (Keyword)cKeyAlternatives_0_0.eContents().get(0);
		private final Keyword cKeyMatch_oneKeyword_0_0_1 = (Keyword)cKeyAlternatives_0_0.eContents().get(1);
		private final Keyword cKeyMatch_betweenKeyword_0_0_2 = (Keyword)cKeyAlternatives_0_0.eContents().get(2);
		private final Keyword cKeyMatch_regexKeyword_0_0_3 = (Keyword)cKeyAlternatives_0_0.eContents().get(3);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//S_Match returns Statement:
		//    key=("match" | "match_one" | "match_between" | "match_regex") expr=Expression block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//key=("match" | "match_one" | "match_between" | "match_regex") expr=Expression block=Block
		public Group getGroup() { return cGroup; }
		
		//key=("match" | "match_one" | "match_between" | "match_regex")
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//("match" | "match_one" | "match_between" | "match_regex")
		public Alternatives getKeyAlternatives_0_0() { return cKeyAlternatives_0_0; }
		
		//"match"
		public Keyword getKeyMatchKeyword_0_0_0() { return cKeyMatchKeyword_0_0_0; }
		
		//"match_one"
		public Keyword getKeyMatch_oneKeyword_0_0_1() { return cKeyMatch_oneKeyword_0_0_1; }
		
		//"match_between"
		public Keyword getKeyMatch_betweenKeyword_0_0_2() { return cKeyMatch_betweenKeyword_0_0_2; }
		
		//"match_regex"
		public Keyword getKeyMatch_regexKeyword_0_0_3() { return cKeyMatch_regexKeyword_0_0_3; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class S_DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_DefaultParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//S_Default returns Statement:
		//    key=K_Default block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Default block=Block
		public Group getGroup() { return cGroup; }
		
		//key=K_Default
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Default
		public RuleCall getKeyK_DefaultParserRuleCall_0_0() { return cKeyK_DefaultParserRuleCall_0_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class S_ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyReturnKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//S_Return returns Statement:
		//    key='return' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//key='return' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//key='return'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'return'
		public Keyword getKeyReturnKeyword_0_0() { return cKeyReturnKeyword_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class S_BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyBreakKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//S_Break returns Statement:
		//    key='break' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//key='break' ';'
		public Group getGroup() { return cGroup; }
		
		//key='break'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'break'
		public Keyword getKeyBreakKeyword_0_0() { return cKeyBreakKeyword_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class S_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_DefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cS_SpeciesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cS_ReflexParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cS_ActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cS_VarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cS_LoopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////S_Other:
		////    key=ID (facets+=Facet)* (block=Block | ';');
		///**------------------------------------------------------------------------
		// * Declaration statements: reflexes, actions, variables...
		//-------------------------------------------------------------------------*/
		//S_Declaration:
		//    ->S_Definition | S_Species | S_Reflex | S_Action | S_Var | S_Loop;
		@Override public ParserRule getRule() { return rule; }
		
		//->S_Definition | S_Species | S_Reflex | S_Action | S_Var | S_Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//->S_Definition
		public RuleCall getS_DefinitionParserRuleCall_0() { return cS_DefinitionParserRuleCall_0; }
		
		//S_Species
		public RuleCall getS_SpeciesParserRuleCall_1() { return cS_SpeciesParserRuleCall_1; }
		
		//S_Reflex
		public RuleCall getS_ReflexParserRuleCall_2() { return cS_ReflexParserRuleCall_2; }
		
		//S_Action
		public RuleCall getS_ActionParserRuleCall_3() { return cS_ActionParserRuleCall_3; }
		
		//S_Var
		public RuleCall getS_VarParserRuleCall_4() { return cS_VarParserRuleCall_4; }
		
		//S_Loop
		public RuleCall getS_LoopParserRuleCall_5() { return cS_LoopParserRuleCall_5; }
	}
	public class S_ReflexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Reflex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_ReflexParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//S_Reflex:
		//    key=K_Reflex (name=Valid_ID)?     ("when" ":" expr=Expression)? block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Reflex (name=Valid_ID)?	 ("when" ":" expr=Expression)? block=Block
		public Group getGroup() { return cGroup; }
		
		//key=K_Reflex
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Reflex
		public RuleCall getKeyK_ReflexParserRuleCall_0_0() { return cKeyK_ReflexParserRuleCall_0_0; }
		
		//(name=Valid_ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
		
		//("when" ":" expr=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"when"
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_2_0() { return cExprExpressionParserRuleCall_2_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class S_DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTkeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTkeyTypeRefParserRuleCall_0_0 = (RuleCall)cTkeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameValid_IDParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsActionArgumentsParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cFacetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFacetsFacetParserRuleCall_3_0 = (RuleCall)cFacetsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_4_0_0 = (RuleCall)cBlockAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//S_Definition:
		//    tkey=(TypeRef) name=(Valid_ID | STRING) ('(' (args=ActionArguments) ')')? (facets+=Facet)*
		//    (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//tkey=(TypeRef) name=(Valid_ID | STRING) ('(' (args=ActionArguments) ')')? (facets+=Facet)*
		//(block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//tkey=(TypeRef)
		public Assignment getTkeyAssignment_0() { return cTkeyAssignment_0; }
		
		//(TypeRef)
		public RuleCall getTkeyTypeRefParserRuleCall_0_0() { return cTkeyTypeRefParserRuleCall_0_0; }
		
		//name=(Valid_ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(Valid_ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0_0() { return cNameValid_IDParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//('(' (args=ActionArguments) ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(args=ActionArguments)
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }
		
		//ActionArguments
		public RuleCall getArgsActionArgumentsParserRuleCall_2_1_0() { return cArgsActionArgumentsParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_3() { return cFacetsAssignment_3; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_3_0() { return cFacetsFacetParserRuleCall_3_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//block=Block
		public Assignment getBlockAssignment_4_0() { return cBlockAssignment_4_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0_0() { return cBlockBlockParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class S_ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cS_ActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeyActionKeyword_1_0 = (Keyword)cKeyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValid_IDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsActionArgumentsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFacetsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFacetsFacetParserRuleCall_4_0 = (RuleCall)cFacetsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_5_0_0 = (RuleCall)cBlockAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//S_Action returns S_Definition:
		//    {S_Action} key="action" name=Valid_ID ('(' (args=ActionArguments) ')')? (facets+=Facet)*
		//    (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{S_Action} key="action" name=Valid_ID ('(' (args=ActionArguments) ')')? (facets+=Facet)*
		//(block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//{S_Action}
		public Action getS_ActionAction_0() { return cS_ActionAction_0; }
		
		//key="action"
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//"action"
		public Keyword getKeyActionKeyword_1_0() { return cKeyActionKeyword_1_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_2_0() { return cNameValid_IDParserRuleCall_2_0; }
		
		//('(' (args=ActionArguments) ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(args=ActionArguments)
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//ActionArguments
		public RuleCall getArgsActionArgumentsParserRuleCall_3_1_0() { return cArgsActionArgumentsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_4() { return cFacetsAssignment_4; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_4_0() { return cFacetsFacetParserRuleCall_4_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//block=Block
		public Assignment getBlockAssignment_5_0() { return cBlockAssignment_5_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0_0() { return cBlockBlockParserRuleCall_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}
	public class S_VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cS_VarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyK_VarParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValid_IDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFacetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFacetsFacetParserRuleCall_3_0 = (RuleCall)cFacetsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//S_Var returns S_Definition:
		//    {S_Var} key=K_Var name=Valid_ID (facets+=Facet)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{S_Var} key=K_Var name=Valid_ID (facets+=Facet)* ';'
		public Group getGroup() { return cGroup; }
		
		//{S_Var}
		public Action getS_VarAction_0() { return cS_VarAction_0; }
		
		//key=K_Var
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//K_Var
		public RuleCall getKeyK_VarParserRuleCall_1_0() { return cKeyK_VarParserRuleCall_1_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_2_0() { return cNameValid_IDParserRuleCall_2_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_3() { return cFacetsAssignment_3; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_3_0() { return cFacetsFacetParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class S_AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_DirectAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cS_SetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Assignment statements: <-, set, single equation
		//-------------------------------------------------------------------------*/
		//S_Assignment:
		//    S_DirectAssignment | S_Set;
		@Override public ParserRule getRule() { return rule; }
		
		//S_DirectAssignment | S_Set
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//S_DirectAssignment
		public RuleCall getS_DirectAssignmentParserRuleCall_0() { return cS_DirectAssignmentParserRuleCall_0; }
		
		//S_Set
		public RuleCall getS_SetParserRuleCall_1() { return cS_SetParserRuleCall_1; }
	}
	public class S_DirectAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_DirectAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0_0 = (RuleCall)cExprAssignment_0_0.eContents().get(0);
		private final Assignment cKeyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cKeyK_AssignmentParserRuleCall_0_1_0 = (RuleCall)cKeyAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cFacetsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFacetsFacetParserRuleCall_0_3_0 = (RuleCall)cFacetsAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//S_DirectAssignment:
		//    (expr=Expression key=(K_Assignment) value=Expression (facets+=Facet)*) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(expr=Expression key=(K_Assignment) value=Expression (facets+=Facet)*) ';'
		public Group getGroup() { return cGroup; }
		
		//(expr=Expression key=(K_Assignment) value=Expression (facets+=Facet)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_0_0() { return cExprAssignment_0_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0_0() { return cExprExpressionParserRuleCall_0_0_0; }
		
		//key=(K_Assignment)
		public Assignment getKeyAssignment_0_1() { return cKeyAssignment_0_1; }
		
		//(K_Assignment)
		public RuleCall getKeyK_AssignmentParserRuleCall_0_1_0() { return cKeyK_AssignmentParserRuleCall_0_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_2_0() { return cValueExpressionParserRuleCall_0_2_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_0_3() { return cFacetsAssignment_0_3; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_0_3_0() { return cFacetsFacetParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class S_SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeySetKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//S_Set:
		//    key="set" expr=Expression ("value:" | "<-") value=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//key="set" expr=Expression ("value:" | "<-") value=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//key="set"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"set"
		public Keyword getKeySetKeyword_0_0() { return cKeySetKeyword_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//("value:" | "<-")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"value:"
		public Keyword getValueKeyword_2_0() { return cValueKeyword_2_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2_1() { return cLessThanSignHyphenMinusKeyword_2_1; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class S_EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cExprAlternatives_0_0 = (Alternatives)cExprAssignment_0.eContents().get(0);
		private final RuleCall cExprFunctionParserRuleCall_0_0_0 = (RuleCall)cExprAlternatives_0_0.eContents().get(0);
		private final RuleCall cExprVariableRefParserRuleCall_0_0_1 = (RuleCall)cExprAlternatives_0_0.eContents().get(1);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeyEqualsSignKeyword_1_0 = (Keyword)cKeyAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//S_Equation returns S_Assignment:
		//    expr=(Function | VariableRef) key="=" value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=(Function | VariableRef) key="=" value=Expression
		public Group getGroup() { return cGroup; }
		
		//expr=(Function | VariableRef)
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//(Function | VariableRef)
		public Alternatives getExprAlternatives_0_0() { return cExprAlternatives_0_0; }
		
		//Function
		public RuleCall getExprFunctionParserRuleCall_0_0_0() { return cExprFunctionParserRuleCall_0_0_0; }
		
		//VariableRef
		public RuleCall getExprVariableRefParserRuleCall_0_0_1() { return cExprVariableRefParserRuleCall_0_0_1; }
		
		//key="="
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//"="
		public Keyword getKeyEqualsSignKeyword_1_0() { return cKeyEqualsSignKeyword_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class S_EquationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Equations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_EquationsParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cEquationsAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final RuleCall cEquationsS_EquationParserRuleCall_3_0_1_0_0 = (RuleCall)cEquationsAssignment_3_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1_1 = (Keyword)cGroup_3_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Equation statements: equations system, solve
		//-------------------------------------------------------------------------*/
		//S_Equations:
		//    key=K_Equations name=Valid_ID (facets+=Facet)* ('{' (equations+=S_Equation ';')* '}' | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Equations name=Valid_ID (facets+=Facet)* ('{' (equations+=S_Equation ';')* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Equations
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Equations
		public RuleCall getKeyK_EquationsParserRuleCall_0_0() { return cKeyK_EquationsParserRuleCall_0_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//('{' (equations+=S_Equation ';')* '}' | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' (equations+=S_Equation ';')* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//(equations+=S_Equation ';')*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//equations+=S_Equation
		public Assignment getEquationsAssignment_3_0_1_0() { return cEquationsAssignment_3_0_1_0; }
		
		//S_Equation
		public RuleCall getEquationsS_EquationParserRuleCall_3_0_1_0_0() { return cEquationsS_EquationParserRuleCall_3_0_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_1_1() { return cSemicolonKeyword_3_0_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_SolveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Solve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_SolveParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEquationRefParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//S_Solve:
		//    key=K_Solve expr=EquationRef (facets+=Facet)* (block=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Solve expr=EquationRef (facets+=Facet)* (block=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//key=K_Solve
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Solve
		public RuleCall getKeyK_SolveParserRuleCall_0_0() { return cKeyK_SolveParserRuleCall_0_0; }
		
		//expr=EquationRef
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//EquationRef
		public RuleCall getExprEquationRefParserRuleCall_1_0() { return cExprEquationRefParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=Block | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyDisplayKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameValid_IDParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockB_DisplayParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Display statements: display & layers (species, grid, image)
		//-------------------------------------------------------------------------*/
		//S_Display:
		//    key="display" name=(Valid_ID | STRING) (facets+=Facet)* block=B_Display;
		@Override public ParserRule getRule() { return rule; }
		
		//key="display" name=(Valid_ID | STRING) (facets+=Facet)* block=B_Display
		public Group getGroup() { return cGroup; }
		
		//key="display"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"display"
		public Keyword getKeyDisplayKeyword_0_0() { return cKeyDisplayKeyword_0_0; }
		
		//name=(Valid_ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(Valid_ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0_0() { return cNameValid_IDParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//block=B_Display
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//B_Display
		public RuleCall getBlockB_DisplayParserRuleCall_3_0() { return cBlockB_DisplayParserRuleCall_3_0; }
	}
	public class S_DisplayLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_DisplayLayer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_SpeciesLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cS_ImageLayerParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//S_DisplayLayer returns Statement:
		//    =>S_SpeciesLayer | (=>S_ImageLayer | Statement);
		@Override public ParserRule getRule() { return rule; }
		
		//=>S_SpeciesLayer | (=>S_ImageLayer | Statement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=>S_SpeciesLayer
		public RuleCall getS_SpeciesLayerParserRuleCall_0() { return cS_SpeciesLayerParserRuleCall_0; }
		
		//(=>S_ImageLayer | Statement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=>S_ImageLayer
		public RuleCall getS_ImageLayerParserRuleCall_1_0() { return cS_ImageLayerParserRuleCall_1_0; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_1_1() { return cStatementParserRuleCall_1_1; }
	}
	public class S_SpeciesLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_SpeciesLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_SpeciesParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockB_DisplayParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//S_SpeciesLayer:
		//    key=K_Species expr=Expression (facets+=Facet)* (block=B_Display | ";");
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_Species expr=Expression (facets+=Facet)* (block=B_Display | ";")
		public Group getGroup() { return cGroup; }
		
		//key=K_Species
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_Species
		public RuleCall getKeyK_SpeciesParserRuleCall_0_0() { return cKeyK_SpeciesParserRuleCall_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//(block=B_Display | ";")
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//block=B_Display
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }
		
		//B_Display
		public RuleCall getBlockB_DisplayParserRuleCall_3_0_0() { return cBlockB_DisplayParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class S_ImageLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.S_ImageLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyK_ImageLayerParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//S_ImageLayer:
		//    key=K_ImageLayer expr=Expression (facets+=Facet)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//key=K_ImageLayer expr=Expression (facets+=Facet)* ";"
		public Group getGroup() { return cGroup; }
		
		//key=K_ImageLayer
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//K_ImageLayer
		public RuleCall getKeyK_ImageLayerParserRuleCall_0_0() { return cKeyK_ImageLayerParserRuleCall_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//(facets+=Facet)*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class K_EquationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Equations");
		private final Keyword cEquationKeyword = (Keyword)rule.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Keys of statements
		//-------------------------------------------------------------------------*/
		//K_Equations:
		//    "equation";
		@Override public ParserRule getRule() { return rule; }
		
		//"equation"
		public Keyword getEquationKeyword() { return cEquationKeyword; }
	}
	public class K_SolveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Solve");
		private final Keyword cSolveKeyword = (Keyword)rule.eContents().get(1);
		
		//K_Solve:
		//    "solve";
		@Override public ParserRule getRule() { return rule; }
		
		//"solve"
		public Keyword getSolveKeyword() { return cSolveKeyword; }
	}
	public class K_SpeciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Species");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSpeciesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGridKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//K_Species:
		//    "species" | "grid";
		@Override public ParserRule getRule() { return rule; }
		
		//"species" | "grid"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"species"
		public Keyword getSpeciesKeyword_0() { return cSpeciesKeyword_0; }
		
		//"grid"
		public Keyword getGridKeyword_1() { return cGridKeyword_1; }
	}
	public class K_ImageLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_ImageLayer");
		private final Keyword cImageKeyword = (Keyword)rule.eContents().get(1);
		
		//K_ImageLayer:
		//    "image";
		@Override public ParserRule getRule() { return rule; }
		
		//"image"
		public Keyword getImageKeyword() { return cImageKeyword; }
	}
	public class K_ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Experiment");
		private final Keyword cExperimentKeyword = (Keyword)rule.eContents().get(1);
		
		//K_Experiment:
		//    "experiment";
		@Override public ParserRule getRule() { return rule; }
		
		//"experiment"
		public Keyword getExperimentKeyword() { return cExperimentKeyword; }
	}
	public class K_1Expr_Facets_BlockOrEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_1Expr_Facets_BlockOrEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cK_LayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cReleaseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCaptureKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCreateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cErrorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cWarnKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cExceptionKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSaveKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAssertKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cInspectKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBrowseKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRestoreKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDrawKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cUsingKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPutKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cAddKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cRemoveKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cParameterKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cStatusKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cHighlightKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cFocus_onKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cLayoutKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//K_1Expr_Facets_BlockOrEnd:
		//    K_Layer | "ask" | "release" | "capture" | "create" | "write" | "error" | "warn" | "exception" | "save" | "assert"
		//    | "inspect" | "browse" | "restore" | "draw" | "using" | "put" | "add" | "remove" | "parameter"
		//    | "status" | "highlight" | "focus_on" | "layout";
		@Override public ParserRule getRule() { return rule; }
		
		//K_Layer | "ask" | "release" | "capture" | "create" | "write" | "error" | "warn" | "exception" | "save" | "assert"
		//| "inspect" | "browse" | "restore" | "draw" | "using" | "put" | "add" | "remove" | "parameter"
		//| "status" | "highlight" | "focus_on" | "layout"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//K_Layer
		public RuleCall getK_LayerParserRuleCall_0() { return cK_LayerParserRuleCall_0; }
		
		//"ask"
		public Keyword getAskKeyword_1() { return cAskKeyword_1; }
		
		//"release"
		public Keyword getReleaseKeyword_2() { return cReleaseKeyword_2; }
		
		//"capture"
		public Keyword getCaptureKeyword_3() { return cCaptureKeyword_3; }
		
		//"create"
		public Keyword getCreateKeyword_4() { return cCreateKeyword_4; }
		
		//"write"
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//"error"
		public Keyword getErrorKeyword_6() { return cErrorKeyword_6; }
		
		//"warn"
		public Keyword getWarnKeyword_7() { return cWarnKeyword_7; }
		
		//"exception"
		public Keyword getExceptionKeyword_8() { return cExceptionKeyword_8; }
		
		//"save"
		public Keyword getSaveKeyword_9() { return cSaveKeyword_9; }
		
		//"assert"
		public Keyword getAssertKeyword_10() { return cAssertKeyword_10; }
		
		//"inspect"
		public Keyword getInspectKeyword_11() { return cInspectKeyword_11; }
		
		//"browse"
		public Keyword getBrowseKeyword_12() { return cBrowseKeyword_12; }
		
		//"restore"
		public Keyword getRestoreKeyword_13() { return cRestoreKeyword_13; }
		
		//"draw"
		public Keyword getDrawKeyword_14() { return cDrawKeyword_14; }
		
		//"using"
		public Keyword getUsingKeyword_15() { return cUsingKeyword_15; }
		
		//"put"
		public Keyword getPutKeyword_16() { return cPutKeyword_16; }
		
		//"add"
		public Keyword getAddKeyword_17() { return cAddKeyword_17; }
		
		//"remove"
		public Keyword getRemoveKeyword_18() { return cRemoveKeyword_18; }
		
		//"parameter"
		public Keyword getParameterKeyword_19() { return cParameterKeyword_19; }
		
		//"status"
		public Keyword getStatusKeyword_20() { return cStatusKeyword_20; }
		
		//"highlight"
		public Keyword getHighlightKeyword_21() { return cHighlightKeyword_21; }
		
		//"focus_on"
		public Keyword getFocus_onKeyword_22() { return cFocus_onKeyword_22; }
		
		//"layout"
		public Keyword getLayoutKeyword_23() { return cLayoutKeyword_23; }
	}
	public class K_LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Layer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLightKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCameraKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImage_layerKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDataKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cChartKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAgentsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGraphicsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDisplay_populationKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDisplay_gridKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEventKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOverlayKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDatalistKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cMeshKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//K_Layer:
		//    "light" | "camera" | "text" | "image_layer" | "data" | "chart" | "agents" | "graphics" | "display_population" |
		//    "display_grid" | "event" | "overlay" | "datalist" | "mesh";
		@Override public ParserRule getRule() { return rule; }
		
		//"light" | "camera" | "text" | "image_layer" | "data" | "chart" | "agents" | "graphics" | "display_population" |
		//"display_grid" | "event" | "overlay" | "datalist" | "mesh"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"light"
		public Keyword getLightKeyword_0() { return cLightKeyword_0; }
		
		//"camera"
		public Keyword getCameraKeyword_1() { return cCameraKeyword_1; }
		
		//"text"
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }
		
		//"image_layer"
		public Keyword getImage_layerKeyword_3() { return cImage_layerKeyword_3; }
		
		//"data"
		public Keyword getDataKeyword_4() { return cDataKeyword_4; }
		
		//"chart"
		public Keyword getChartKeyword_5() { return cChartKeyword_5; }
		
		//"agents"
		public Keyword getAgentsKeyword_6() { return cAgentsKeyword_6; }
		
		//"graphics"
		public Keyword getGraphicsKeyword_7() { return cGraphicsKeyword_7; }
		
		//"display_population"
		public Keyword getDisplay_populationKeyword_8() { return cDisplay_populationKeyword_8; }
		
		//"display_grid"
		public Keyword getDisplay_gridKeyword_9() { return cDisplay_gridKeyword_9; }
		
		//"event"
		public Keyword getEventKeyword_10() { return cEventKeyword_10; }
		
		//"overlay"
		public Keyword getOverlayKeyword_11() { return cOverlayKeyword_11; }
		
		//"datalist"
		public Keyword getDatalistKeyword_12() { return cDatalistKeyword_12; }
		
		//"mesh"
		public Keyword getMeshKeyword_13() { return cMeshKeyword_13; }
	}
	public class K_DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Do");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInvokeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//K_Do:
		//    "do" | "invoke";
		@Override public ParserRule getRule() { return rule; }
		
		//"do" | "invoke"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//"invoke"
		public Keyword getInvokeKeyword_1() { return cInvokeKeyword_1; }
	}
	public class K_DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Default");
		private final Keyword cDefaultKeyword = (Keyword)rule.eContents().get(1);
		
		//K_Default:
		//    "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"default"
		public Keyword getDefaultKeyword() { return cDefaultKeyword; }
	}
	public class K_VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Var");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLetKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cArgKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//K_Var:
		//    "var" | "const" | "let" | "arg";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" | "const" | "let" | "arg"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//"let"
		public Keyword getLetKeyword_2() { return cLetKeyword_2; }
		
		//"arg"
		public Keyword getArgKeyword_3() { return cArgKeyword_3; }
	}
	public class K_ReflexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Reflex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReflexKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAspectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//K_Reflex:
		//    "init" | "reflex" | "aspect";
		@Override public ParserRule getRule() { return rule; }
		
		//"init" | "reflex" | "aspect"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//"reflex"
		public Keyword getReflexKeyword_1() { return cReflexKeyword_1; }
		
		//"aspect"
		public Keyword getAspectKeyword_2() { return cAspectKeyword_2; }
	}
	public class K_AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.K_Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignPlusSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cGreaterThanSignHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignLessThanSignHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignPlusSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignHyphenMinusKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//K_Assignment:
		//    "<-" | "<<" | '>' '>' | "<<+" | '>' '>-' | "+<-" | "<+" | ">-";
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" | "<<" | '>' '>' | "<<+" | '>' '>-' | "+<-" | "<+" | ">-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
		
		//'>' '>'
		public Group getGroup_2() { return cGroup_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_1() { return cGreaterThanSignKeyword_2_1; }
		
		//"<<+"
		public Keyword getLessThanSignLessThanSignPlusSignKeyword_3() { return cLessThanSignLessThanSignPlusSignKeyword_3; }
		
		//'>' '>-'
		public Group getGroup_4() { return cGroup_4; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_0() { return cGreaterThanSignKeyword_4_0; }
		
		//'>-'
		public Keyword getGreaterThanSignHyphenMinusKeyword_4_1() { return cGreaterThanSignHyphenMinusKeyword_4_1; }
		
		//"+<-"
		public Keyword getPlusSignLessThanSignHyphenMinusKeyword_5() { return cPlusSignLessThanSignHyphenMinusKeyword_5; }
		
		//"<+"
		public Keyword getLessThanSignPlusSignKeyword_6() { return cLessThanSignPlusSignKeyword_6; }
		
		//">-"
		public Keyword getGreaterThanSignHyphenMinusKeyword_7() { return cGreaterThanSignHyphenMinusKeyword_7; }
	}
	public class ActionArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ActionArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsArgumentDefinitionParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsArgumentDefinitionParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Parameters and arguments
		//-------------------------------------------------------------------------*/
		//ActionArguments:
		//    args+=ArgumentDefinition (',' args+=ArgumentDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//args+=ArgumentDefinition (',' args+=ArgumentDefinition)*
		public Group getGroup() { return cGroup; }
		
		//args+=ArgumentDefinition
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//ArgumentDefinition
		public RuleCall getArgsArgumentDefinitionParserRuleCall_0_0() { return cArgsArgumentDefinitionParserRuleCall_0_0; }
		
		//(',' args+=ArgumentDefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//args+=ArgumentDefinition
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//ArgumentDefinition
		public RuleCall getArgsArgumentDefinitionParserRuleCall_1_1_0() { return cArgsArgumentDefinitionParserRuleCall_1_1_0; }
	}
	public class ArgumentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ArgumentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultExpressionParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		//ArgumentDefinition:
		//    type=(TypeRef) name=Valid_ID ('<-' default=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(TypeRef) name=Valid_ID ('<-' default=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=(TypeRef)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(TypeRef)
		public RuleCall getTypeTypeRefParserRuleCall_0_0() { return cTypeTypeRefParserRuleCall_0_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
		
		//('<-' default=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2_0() { return cLessThanSignHyphenMinusKeyword_2_0; }
		
		//default=Expression
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }
		
		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_2_1_0() { return cDefaultExpressionParserRuleCall_2_1_0; }
	}
	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Facet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cF_ActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cF_DefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cF_RegularParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cF_TypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cF_VarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cF_FunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///**------------------------------------------------------------------------
		// * Facets
		//-------------------------------------------------------------------------*/
		//Facet:
		//    F_Action | F_Definition | F_Regular | F_Type | F_Var | F_Function;
		@Override public ParserRule getRule() { return rule; }
		
		//F_Action | F_Definition | F_Regular | F_Type | F_Var | F_Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//F_Action
		public RuleCall getF_ActionParserRuleCall_0() { return cF_ActionParserRuleCall_0; }
		
		//F_Definition
		public RuleCall getF_DefinitionParserRuleCall_1() { return cF_DefinitionParserRuleCall_1; }
		
		//F_Regular
		public RuleCall getF_RegularParserRuleCall_2() { return cF_RegularParserRuleCall_2; }
		
		//F_Type
		public RuleCall getF_TypeParserRuleCall_3() { return cF_TypeParserRuleCall_3; }
		
		//F_Var
		public RuleCall getF_VarParserRuleCall_4() { return cF_VarParserRuleCall_4; }
		
		//F_Function
		public RuleCall getF_FunctionParserRuleCall_5() { return cF_FunctionParserRuleCall_5; }
	}
	public class F_RegularElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Regular");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cKeyFK_RegularParserRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Assignment cKeyAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cKeyLessThanSignHyphenMinusKeyword_0_1_0 = (Keyword)cKeyAssignment_0_1.eContents().get(0);
		private final Assignment cKeyAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cKeyFK_SpecialParserRuleCall_0_2_0 = (RuleCall)cKeyAssignment_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//F_Regular returns Facet:
		//    (key=FK_Regular | key='<-' | key=FK_Special) expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(key=FK_Regular | key='<-' | key=FK_Special) expr=Expression
		public Group getGroup() { return cGroup; }
		
		//(key=FK_Regular | key='<-' | key=FK_Special)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//key=FK_Regular
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//FK_Regular
		public RuleCall getKeyFK_RegularParserRuleCall_0_0_0() { return cKeyFK_RegularParserRuleCall_0_0_0; }
		
		//key='<-'
		public Assignment getKeyAssignment_0_1() { return cKeyAssignment_0_1; }
		
		//'<-'
		public Keyword getKeyLessThanSignHyphenMinusKeyword_0_1_0() { return cKeyLessThanSignHyphenMinusKeyword_0_1_0; }
		
		//key=FK_Special
		public Assignment getKeyAssignment_0_2() { return cKeyAssignment_0_2; }
		
		//FK_Special
		public RuleCall getKeyFK_SpecialParserRuleCall_0_2_0() { return cKeyFK_SpecialParserRuleCall_0_2_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class F_DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFK_DefinitionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameValid_IDParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		
		//F_Definition returns Facet:
		//    ((->key=FK_Definition) name=(Valid_ID | STRING));
		@Override public ParserRule getRule() { return rule; }
		
		//((->key=FK_Definition) name=(Valid_ID | STRING))
		public Group getGroup() { return cGroup; }
		
		//(->key=FK_Definition)
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//FK_Definition
		public RuleCall getKeyFK_DefinitionParserRuleCall_0_0() { return cKeyFK_DefinitionParserRuleCall_0_0; }
		
		//name=(Valid_ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(Valid_ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0_0() { return cNameValid_IDParserRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
	}
	public class F_FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//F_Function returns Facet:
		//    key='->' (=>(expr=Expression) | ('{' expr=Expression '}'));
		@Override public ParserRule getRule() { return rule; }
		
		//key='->' (=>(expr=Expression) | ('{' expr=Expression '}'))
		public Group getGroup() { return cGroup; }
		
		//key='->'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'->'
		public Keyword getKeyHyphenMinusGreaterThanSignKeyword_0_0() { return cKeyHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//(=>(expr=Expression) | ('{' expr=Expression '}'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=>(expr=Expression)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_0_0() { return cExprExpressionParserRuleCall_1_0_0_0; }
		
		//('{' expr=Expression '}')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_1_0() { return cExprExpressionParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}
	public class F_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFK_TypeParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExprTypeRefParserRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//F_Type returns Facet:
		//    key=FK_Type (->(expr=TypeRef) | expr=Expression);
		@Override public ParserRule getRule() { return rule; }
		
		//key=FK_Type (->(expr=TypeRef) | expr=Expression)
		public Group getGroup() { return cGroup; }
		
		//key=FK_Type
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//FK_Type
		public RuleCall getKeyFK_TypeParserRuleCall_0_0() { return cKeyFK_TypeParserRuleCall_0_0; }
		
		//(->(expr=TypeRef) | expr=Expression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//->(expr=TypeRef)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expr=TypeRef
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }
		
		//TypeRef
		public RuleCall getExprTypeRefParserRuleCall_1_0_0_0() { return cExprTypeRefParserRuleCall_1_0_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}
	public class F_ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFK_ActionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprActionRefParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cBlockAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_1_0 = (RuleCall)cBlockAssignment_1_1.eContents().get(0);
		
		//F_Action returns Facet:
		//    key=FK_Action (expr=ActionRef | block=Block);
		@Override public ParserRule getRule() { return rule; }
		
		//key=FK_Action (expr=ActionRef | block=Block)
		public Group getGroup() { return cGroup; }
		
		//key=FK_Action
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//FK_Action
		public RuleCall getKeyFK_ActionParserRuleCall_0_0() { return cKeyFK_ActionParserRuleCall_0_0; }
		
		//(expr=ActionRef | block=Block)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=ActionRef
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//ActionRef
		public RuleCall getExprActionRefParserRuleCall_1_0_0() { return cExprActionRefParserRuleCall_1_0_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1_1() { return cBlockAssignment_1_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_1_0() { return cBlockBlockParserRuleCall_1_1_0; }
	}
	public class F_VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.F_Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFK_VarParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprVariableRefParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//F_Var returns Facet:
		//    key=FK_Var expr=VariableRef;
		@Override public ParserRule getRule() { return rule; }
		
		//key=FK_Var expr=VariableRef
		public Group getGroup() { return cGroup; }
		
		//key=FK_Var
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//FK_Var
		public RuleCall getKeyFK_VarParserRuleCall_0_0() { return cKeyFK_VarParserRuleCall_0_0; }
		
		//expr=VariableRef
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//VariableRef
		public RuleCall getExprVariableRefParserRuleCall_1_0() { return cExprVariableRefParserRuleCall_1_0; }
	}
	public class FK_RegularElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Regular");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Facet keys
		//-------------------------------------------------------------------------*/
		////FirstFacetKey:
		////    DefinitionFacetKey | TypeFacetKey | SpecialFacetKey | VarFacetKey | ActionFacetKey | ClassicFacetKey;
		//FK_Regular:
		//    (ID ':');
		@Override public ParserRule getRule() { return rule; }
		
		//(ID ':')
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class FK_DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReturnsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FK_Definition:
		//    "name:" | "returns:";
		@Override public ParserRule getRule() { return rule; }
		
		//"name:" | "returns:"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"name:"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//"returns:"
		public Keyword getReturnsKeyword_1() { return cReturnsKeyword_1; }
	}
	public class FK_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cParentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSpeciesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//FK_Type:
		//    ("as:" | "of:" | "parent:" | "species:" | "type:");
		@Override public ParserRule getRule() { return rule; }
		
		//("as:" | "of:" | "parent:" | "species:" | "type:")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"as:"
		public Keyword getAsKeyword_0() { return cAsKeyword_0; }
		
		//"of:"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//"parent:"
		public Keyword getParentKeyword_2() { return cParentKeyword_2; }
		
		//"species:"
		public Keyword getSpeciesKeyword_3() { return cSpeciesKeyword_3; }
		
		//"type:"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
	}
	public class FK_SpecialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Special");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCameraKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cConstKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cValueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTopologyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cItemKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cInitKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMessageKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cControlKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLayoutKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cEnvironmentKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTextKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cImageKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUsingKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cParameterKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cAspectKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cLightKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//FK_Special:
		//    'camera:' | 'data:' | 'when' ':' | "const:" | "value:" | "topology:" | "item:" | "init:" | "message:" | "control:" |
		//    "layout:" | "environment:" | 'text:' | 'image:' | 'using:' | "parameter:" | "aspect:" | "light:";
		@Override public ParserRule getRule() { return rule; }
		
		//'camera:' | 'data:' | 'when' ':' | "const:" | "value:" | "topology:" | "item:" | "init:" | "message:" | "control:" |
		//"layout:" | "environment:" | 'text:' | 'image:' | 'using:' | "parameter:" | "aspect:" | "light:"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'camera:'
		public Keyword getCameraKeyword_0() { return cCameraKeyword_0; }
		
		//'data:'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//'when' ':'
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//"const:"
		public Keyword getConstKeyword_3() { return cConstKeyword_3; }
		
		//"value:"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//"topology:"
		public Keyword getTopologyKeyword_5() { return cTopologyKeyword_5; }
		
		//"item:"
		public Keyword getItemKeyword_6() { return cItemKeyword_6; }
		
		//"init:"
		public Keyword getInitKeyword_7() { return cInitKeyword_7; }
		
		//"message:"
		public Keyword getMessageKeyword_8() { return cMessageKeyword_8; }
		
		//"control:"
		public Keyword getControlKeyword_9() { return cControlKeyword_9; }
		
		//"layout:"
		public Keyword getLayoutKeyword_10() { return cLayoutKeyword_10; }
		
		//"environment:"
		public Keyword getEnvironmentKeyword_11() { return cEnvironmentKeyword_11; }
		
		//'text:'
		public Keyword getTextKeyword_12() { return cTextKeyword_12; }
		
		//'image:'
		public Keyword getImageKeyword_13() { return cImageKeyword_13; }
		
		//'using:'
		public Keyword getUsingKeyword_14() { return cUsingKeyword_14; }
		
		//"parameter:"
		public Keyword getParameterKeyword_15() { return cParameterKeyword_15; }
		
		//"aspect:"
		public Keyword getAspectKeyword_16() { return cAspectKeyword_16; }
		
		//"light:"
		public Keyword getLightKeyword_17() { return cLightKeyword_17; }
	}
	public class FK_ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOn_changeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FK_Action:
		//    "action:" | "on_change:";
		@Override public ParserRule getRule() { return rule; }
		
		//"action:" | "on_change:"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"action:"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//"on_change:"
		public Keyword getOn_changeKeyword_1() { return cOn_changeKeyword_1; }
	}
	public class FK_VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.FK_Var");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//FK_Var:
		//    "var:";
		@Override public ParserRule getRule() { return rule; }
		
		//"var:"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgumentPairParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**------------------------------------------------------------------------
		// * Expressions
		//-------------------------------------------------------------------------*/
		//Expression:
		//    ArgumentPair | Pair;
		@Override public ParserRule getRule() { return rule; }
		
		//ArgumentPair | Pair
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArgumentPair
		public RuleCall getArgumentPairParserRuleCall_0() { return cArgumentPairParserRuleCall_0; }
		
		//Pair
		public RuleCall getPairParserRuleCall_1() { return cPairParserRuleCall_1; }
	}
	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCastParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComparisonParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAdditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMultiplicationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExponentiationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBinaryParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPairParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cUnitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//BinaryOperator returns Expression:
		//    Or | And | Cast | Comparison | Addition | Multiplication | Exponentiation | Binary | Pair | Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//Or | And | Cast | Comparison | Addition | Multiplication | Exponentiation | Binary | Pair | Unit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }
		
		//Cast
		public RuleCall getCastParserRuleCall_2() { return cCastParserRuleCall_2; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_3() { return cComparisonParserRuleCall_3; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_4() { return cAdditionParserRuleCall_4; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_5() { return cMultiplicationParserRuleCall_5; }
		
		//Exponentiation
		public RuleCall getExponentiationParserRuleCall_6() { return cExponentiationParserRuleCall_6; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_7() { return cBinaryParserRuleCall_7; }
		
		//Pair
		public RuleCall getPairParserRuleCall_8() { return cPairParserRuleCall_8; }
		
		//Unit
		public RuleCall getUnitParserRuleCall_9() { return cUnitParserRuleCall_9; }
	}
	public class ArgumentPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ArgumentPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cOpValid_IDParserRuleCall_0_0_0_0_0 = (RuleCall)cOpAssignment_0_0_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cOpAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0_1_0_0 = (Alternatives)cOpAssignment_0_0_1_0.eContents().get(0);
		private final RuleCall cOpFK_DefinitionParserRuleCall_0_0_1_0_0_0 = (RuleCall)cOpAlternatives_0_0_1_0_0.eContents().get(0);
		private final RuleCall cOpFK_TypeParserRuleCall_0_0_1_0_0_1 = (RuleCall)cOpAlternatives_0_0_1_0_0.eContents().get(1);
		private final RuleCall cOpFK_SpecialParserRuleCall_0_0_1_0_0_2 = (RuleCall)cOpAlternatives_0_0_1_0_0.eContents().get(2);
		private final RuleCall cOpFK_ActionParserRuleCall_0_0_1_0_0_3 = (RuleCall)cOpAlternatives_0_0_1_0_0.eContents().get(3);
		private final RuleCall cOpFK_VarParserRuleCall_0_0_1_0_0_4 = (RuleCall)cOpAlternatives_0_0_1_0_0.eContents().get(4);
		private final Keyword cColonKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPairParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//ArgumentPair:
		//    => (op=(Valid_ID) '::' | op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
		//    )? right=Pair;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (op=(Valid_ID) '::' | op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
		//)? right=Pair
		public Group getGroup() { return cGroup; }
		
		//=> (op=(Valid_ID) '::' | op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
		//)?
		public Group getGroup_0() { return cGroup_0; }
		
		//op=(Valid_ID) '::' | op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//op=(Valid_ID) '::'
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//op=(Valid_ID)
		public Assignment getOpAssignment_0_0_0_0() { return cOpAssignment_0_0_0_0; }
		
		//(Valid_ID)
		public RuleCall getOpValid_IDParserRuleCall_0_0_0_0_0() { return cOpValid_IDParserRuleCall_0_0_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_0_1() { return cColonColonKeyword_0_0_0_1; }
		
		//op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var)
		public Assignment getOpAssignment_0_0_1_0() { return cOpAssignment_0_0_1_0; }
		
		//(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var)
		public Alternatives getOpAlternatives_0_0_1_0_0() { return cOpAlternatives_0_0_1_0_0; }
		
		//FK_Definition
		public RuleCall getOpFK_DefinitionParserRuleCall_0_0_1_0_0_0() { return cOpFK_DefinitionParserRuleCall_0_0_1_0_0_0; }
		
		//FK_Type
		public RuleCall getOpFK_TypeParserRuleCall_0_0_1_0_0_1() { return cOpFK_TypeParserRuleCall_0_0_1_0_0_1; }
		
		//FK_Special
		public RuleCall getOpFK_SpecialParserRuleCall_0_0_1_0_0_2() { return cOpFK_SpecialParserRuleCall_0_0_1_0_0_2; }
		
		//FK_Action
		public RuleCall getOpFK_ActionParserRuleCall_0_0_1_0_0_3() { return cOpFK_ActionParserRuleCall_0_0_1_0_0_3; }
		
		//FK_Var
		public RuleCall getOpFK_VarParserRuleCall_0_0_1_0_0_4() { return cOpFK_VarParserRuleCall_0_0_1_0_0_4; }
		
		//':'
		public Keyword getColonKeyword_0_0_1_1() { return cColonKeyword_0_0_1_1; }
		
		//right=Pair
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//Pair
		public RuleCall getRightPairParserRuleCall_1_0() { return cRightPairParserRuleCall_1_0; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpColonColonKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIfParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Pair returns Expression:
		//    If
		//    ({BinaryOperator.left=current}
		//    op='::'
		//    right=If)?;
		@Override public ParserRule getRule() { return rule; }
		
		//If
		//({BinaryOperator.left=current}
		//op='::'
		//right=If)?
		public Group getGroup() { return cGroup; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//({BinaryOperator.left=current}
		//op='::'
		//right=If)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//op='::'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'::'
		public Keyword getOpColonColonKeyword_1_1_0() { return cOpColonColonKeyword_1_1_0; }
		
		//right=If
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//If
		public RuleCall getRightIfParserRuleCall_1_2_0() { return cRightIfParserRuleCall_1_2_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIfLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpQuestionMarkKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cIfFalseAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cIfFalseOrParserRuleCall_1_3_1_0 = (RuleCall)cIfFalseAssignment_1_3_1.eContents().get(0);
		
		//If returns Expression:
		//    Or
		//    ({If.left=current}
		//    op='?'
		//    right=Or
		//    (':'
		//    ifFalse=Or))?;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		//({If.left=current}
		//op='?'
		//right=Or
		//(':'
		//ifFalse=Or))?
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({If.left=current}
		//op='?'
		//right=Or
		//(':'
		//ifFalse=Or))?
		public Group getGroup_1() { return cGroup_1; }
		
		//{If.left=current}
		public Action getIfLeftAction_1_0() { return cIfLeftAction_1_0; }
		
		//op='?'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'?'
		public Keyword getOpQuestionMarkKeyword_1_1_0() { return cOpQuestionMarkKeyword_1_1_0; }
		
		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
		
		//(':'
		//ifFalse=Or)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//':'
		public Keyword getColonKeyword_1_3_0() { return cColonKeyword_1_3_0; }
		
		//ifFalse=Or
		public Assignment getIfFalseAssignment_1_3_1() { return cIfFalseAssignment_1_3_1; }
		
		//Or
		public RuleCall getIfFalseOrParserRuleCall_1_3_1_0() { return cIfFalseOrParserRuleCall_1_3_1_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//    And
		//    ({BinaryOperator.left=current}
		//    op='or'
		//    right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And
		//({BinaryOperator.left=current}
		//op='or'
		//right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({BinaryOperator.left=current}
		//op='or'
		//right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//op='or'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'or'
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCastParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCastParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//    Cast
		//    ({BinaryOperator.left=current}
		//    op='and'
		//    right=Cast)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Cast
		//({BinaryOperator.left=current}
		//op='and'
		//right=Cast)*
		public Group getGroup() { return cGroup; }
		
		//Cast
		public RuleCall getCastParserRuleCall_0() { return cCastParserRuleCall_0; }
		
		//({BinaryOperator.left=current}
		//op='and'
		//right=Cast)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//op='and'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'and'
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }
		
		//right=Cast
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Cast
		public RuleCall getRightCastParserRuleCall_1_2_0() { return cRightCastParserRuleCall_1_2_0; }
	}
	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpAsKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cRightTypeRefParserRuleCall_1_1_0_0 = (RuleCall)cRightAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cRightTypeRefParserRuleCall_1_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		
		//Cast returns Expression:
		//    Comparison
		//    (({BinaryOperator.left=current}
		//    op='as') ((right=TypeRef) | ('(' right=TypeRef ')')))?;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison
		//(({BinaryOperator.left=current}
		//op='as') ((right=TypeRef) | ('(' right=TypeRef ')')))?
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({BinaryOperator.left=current}
		//op='as') ((right=TypeRef) | ('(' right=TypeRef ')')))?
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current}
		//    op='as')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op='as'
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//'as'
		public Keyword getOpAsKeyword_1_0_1_0() { return cOpAsKeyword_1_0_1_0; }
		
		//((right=TypeRef) | ('(' right=TypeRef ')'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//(right=TypeRef)
		public Assignment getRightAssignment_1_1_0() { return cRightAssignment_1_1_0; }
		
		//TypeRef
		public RuleCall getRightTypeRefParserRuleCall_1_1_0_0() { return cRightTypeRefParserRuleCall_1_1_0_0; }
		
		//('(' right=TypeRef ')')
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }
		
		//right=TypeRef
		public Assignment getRightAssignment_1_1_1_1() { return cRightAssignment_1_1_1_1; }
		
		//TypeRef
		public RuleCall getRightTypeRefParserRuleCall_1_1_1_1_0() { return cRightTypeRefParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_5 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//    Addition
		//    (({BinaryOperator.left=current}
		//    op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
		//    right=Addition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		//(({BinaryOperator.left=current}
		//op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
		//right=Addition)?
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(({BinaryOperator.left=current}
		//op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
		//right=Addition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current}
		//    op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op=('!=' | '=' | '>=' | '<=' | '<' | '>')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('!=' | '=' | '>=' | '<=' | '<' | '>')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_0() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_1_0_1() { return cOpEqualsSignKeyword_1_0_1_0_1; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_3; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_1_0_4() { return cOpLessThanSignKeyword_1_0_1_0_4; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_5() { return cOpGreaterThanSignKeyword_1_0_1_0_5; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//    Multiplication
		//    (({BinaryOperator.left=current} op=('+' | '-'))
		//    right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication
		//(({BinaryOperator.left=current} op=('+' | '-'))
		//right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({BinaryOperator.left=current} op=('+' | '-'))
		//right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_1_0_0() { return cOpPlusSignKeyword_1_0_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExponentiationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//    Exponentiation
		//    (({BinaryOperator.left=current} op=('*' | '/')) right=Exponentiation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Exponentiation
		//(({BinaryOperator.left=current} op=('*' | '/')) right=Exponentiation)*
		public Group getGroup() { return cGroup; }
		
		//Exponentiation
		public RuleCall getExponentiationParserRuleCall_0() { return cExponentiationParserRuleCall_0; }
		
		//(({BinaryOperator.left=current} op=('*' | '/')) right=Exponentiation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current} op=('*' | '/'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }
		
		//right=Exponentiation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Exponentiation
		public RuleCall getRightExponentiationParserRuleCall_1_1_0() { return cRightExponentiationParserRuleCall_1_1_0; }
	}
	public class ExponentiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Exponentiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBinaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exponentiation returns Expression:
		//    Binary
		//    (({BinaryOperator.left=current} op=('^')) right=Binary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Binary
		//(({BinaryOperator.left=current} op=('^')) right=Binary)*
		public Group getGroup() { return cGroup; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_0() { return cBinaryParserRuleCall_0; }
		
		//(({BinaryOperator.left=current} op=('^')) right=Binary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current} op=('^'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op=('^')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('^')
		public Keyword getOpCircumflexAccentKeyword_1_0_1_0() { return cOpCircumflexAccentKeyword_1_0_1_0; }
		
		//right=Binary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Binary
		public RuleCall getRightBinaryParserRuleCall_1_1_0() { return cRightBinaryParserRuleCall_1_1_0; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBinaryOperatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpValid_IDParserRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnitParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Binary returns Expression:
		//    Unit
		//    (({BinaryOperator.left=current} op=(Valid_ID)) right=Unit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unit
		//(({BinaryOperator.left=current} op=(Valid_ID)) right=Unit)*
		public Group getGroup() { return cGroup; }
		
		//Unit
		public RuleCall getUnitParserRuleCall_0() { return cUnitParserRuleCall_0; }
		
		//(({BinaryOperator.left=current} op=(Valid_ID)) right=Unit)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BinaryOperator.left=current} op=(Valid_ID))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0_0() { return cBinaryOperatorLeftAction_1_0_0; }
		
		//op=(Valid_ID)
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//(Valid_ID)
		public RuleCall getOpValid_IDParserRuleCall_1_0_1_0() { return cOpValid_IDParserRuleCall_1_0_1_0; }
		
		//right=Unit
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Unit
		public RuleCall getRightUnitParserRuleCall_1_1_0() { return cRightUnitParserRuleCall_1_1_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUnitLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpDegreeSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpNumberSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnitRefParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Unit returns Expression:
		//    Unary
		//    (({Unit.left=current} op=('°' | "#")) right=UnitRef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary
		//(({Unit.left=current} op=('°' | "#")) right=UnitRef)?
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//(({Unit.left=current} op=('°' | "#")) right=UnitRef)?
		public Group getGroup_1() { return cGroup_1; }
		
		//({Unit.left=current} op=('°' | "#"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Unit.left=current}
		public Action getUnitLeftAction_1_0_0() { return cUnitLeftAction_1_0_0; }
		
		//op=('°' | "#")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('°' | "#")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'°'
		public Keyword getOpDegreeSignKeyword_1_0_1_0_0() { return cOpDegreeSignKeyword_1_0_1_0_0; }
		
		//"#"
		public Keyword getOpNumberSignKeyword_1_0_1_0_1() { return cOpNumberSignKeyword_1_0_1_0_1; }
		
		//right=UnitRef
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UnitRef
		public RuleCall getRightUnitRefParserRuleCall_1_1_0() { return cRightUnitRefParserRuleCall_1_1_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cOpAlternatives_1_1_0_0_0 = (Alternatives)cOpAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cOpDegreeSignKeyword_1_1_0_0_0_0 = (Keyword)cOpAlternatives_1_1_0_0_0.eContents().get(0);
		private final Keyword cOpNumberSignKeyword_1_1_0_0_0_1 = (Keyword)cOpAlternatives_1_1_0_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cRightUnitRefParserRuleCall_1_1_0_1_0 = (RuleCall)cRightAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_1_1_0_0 = (Alternatives)cOpAssignment_1_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_1_0_0_0 = (Keyword)cOpAlternatives_1_1_1_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_1_1_1_0_0_1 = (Keyword)cOpAlternatives_1_1_1_0_0.eContents().get(1);
		private final Keyword cOpMyKeyword_1_1_1_0_0_2 = (Keyword)cOpAlternatives_1_1_1_0_0.eContents().get(2);
		private final Keyword cOpTheKeyword_1_1_1_0_0_3 = (Keyword)cOpAlternatives_1_1_1_0_0.eContents().get(3);
		private final Keyword cOpNotKeyword_1_1_1_0_0_4 = (Keyword)cOpAlternatives_1_1_1_0_0.eContents().get(4);
		private final Assignment cRightAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cRightUnaryParserRuleCall_1_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1_1.eContents().get(0);
		
		//Unary returns Expression:
		//    Access |
		//    {Unary} ((op=('°' | '#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
		//    right=Unary));
		@Override public ParserRule getRule() { return rule; }
		
		//Access |
		//{Unary} ((op=('°' | '#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
		//right=Unary))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Access
		public RuleCall getAccessParserRuleCall_0() { return cAccessParserRuleCall_0; }
		
		//{Unary} ((op=('°' | '#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
		//right=Unary))
		public Group getGroup_1() { return cGroup_1; }
		
		//{Unary}
		public Action getUnaryAction_1_0() { return cUnaryAction_1_0; }
		
		//((op=('°' | '#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
		//   right=Unary))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//(op=('°' | '#') right=UnitRef)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//op=('°' | '#')
		public Assignment getOpAssignment_1_1_0_0() { return cOpAssignment_1_1_0_0; }
		
		//('°' | '#')
		public Alternatives getOpAlternatives_1_1_0_0_0() { return cOpAlternatives_1_1_0_0_0; }
		
		//'°'
		public Keyword getOpDegreeSignKeyword_1_1_0_0_0_0() { return cOpDegreeSignKeyword_1_1_0_0_0_0; }
		
		//'#'
		public Keyword getOpNumberSignKeyword_1_1_0_0_0_1() { return cOpNumberSignKeyword_1_1_0_0_0_1; }
		
		//right=UnitRef
		public Assignment getRightAssignment_1_1_0_1() { return cRightAssignment_1_1_0_1; }
		
		//UnitRef
		public RuleCall getRightUnitRefParserRuleCall_1_1_0_1_0() { return cRightUnitRefParserRuleCall_1_1_0_1_0; }
		
		//(op=('-' | '!' | 'my' | 'the' | 'not')
		//   right=Unary)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//op=('-' | '!' | 'my' | 'the' | 'not')
		public Assignment getOpAssignment_1_1_1_0() { return cOpAssignment_1_1_1_0; }
		
		//('-' | '!' | 'my' | 'the' | 'not')
		public Alternatives getOpAlternatives_1_1_1_0_0() { return cOpAlternatives_1_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_1_0_0_0() { return cOpHyphenMinusKeyword_1_1_1_0_0_0; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_1_1_1_0_0_1() { return cOpExclamationMarkKeyword_1_1_1_0_0_1; }
		
		//'my'
		public Keyword getOpMyKeyword_1_1_1_0_0_2() { return cOpMyKeyword_1_1_1_0_0_2; }
		
		//'the'
		public Keyword getOpTheKeyword_1_1_1_0_0_3() { return cOpTheKeyword_1_1_1_0_0_3; }
		
		//'not'
		public Keyword getOpNotKeyword_1_1_1_0_0_4() { return cOpNotKeyword_1_1_1_0_0_4; }
		
		//right=Unary
		public Assignment getRightAssignment_1_1_1_1() { return cRightAssignment_1_1_1_1; }
		
		//Unary
		public RuleCall getRightUnaryParserRuleCall_1_1_1_1_0() { return cRightUnaryParserRuleCall_1_1_1_1_0; }
	}
	public class AccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAccessLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cOpLeftSquareBracketKeyword_1_1_0_0_0 = (Keyword)cOpAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cRightExpressionListParserRuleCall_1_1_0_1_0 = (RuleCall)cRightAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_2 = (Keyword)cGroup_1_1_0.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cOpFullStopKeyword_1_1_1_0_0 = (Keyword)cOpAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Alternatives cRightAlternatives_1_1_1_1_0 = (Alternatives)cRightAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cRightAbstractRefParserRuleCall_1_1_1_1_0_0 = (RuleCall)cRightAlternatives_1_1_1_1_0.eContents().get(0);
		private final RuleCall cRightStringLiteralParserRuleCall_1_1_1_1_0_1 = (RuleCall)cRightAlternatives_1_1_1_1_0.eContents().get(1);
		
		//Access returns Expression:
		//    Primary ({Access.left=current} ((op='[' right=ExpressionList? ']') | (op="." right=(AbstractRef | StringLiteral))))*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Access.left=current} ((op='[' right=ExpressionList? ']') | (op="." right=(AbstractRef | StringLiteral))))*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Access.left=current} ((op='[' right=ExpressionList? ']') | (op="." right=(AbstractRef | StringLiteral))))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Access.left=current}
		public Action getAccessLeftAction_1_0() { return cAccessLeftAction_1_0; }
		
		//((op='[' right=ExpressionList? ']') | (op="." right=(AbstractRef | StringLiteral)))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//(op='[' right=ExpressionList? ']')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//op='['
		public Assignment getOpAssignment_1_1_0_0() { return cOpAssignment_1_1_0_0; }
		
		//'['
		public Keyword getOpLeftSquareBracketKeyword_1_1_0_0_0() { return cOpLeftSquareBracketKeyword_1_1_0_0_0; }
		
		//right=ExpressionList?
		public Assignment getRightAssignment_1_1_0_1() { return cRightAssignment_1_1_0_1; }
		
		//ExpressionList
		public RuleCall getRightExpressionListParserRuleCall_1_1_0_1_0() { return cRightExpressionListParserRuleCall_1_1_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_0_2() { return cRightSquareBracketKeyword_1_1_0_2; }
		
		//(op="." right=(AbstractRef | StringLiteral))
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//op="."
		public Assignment getOpAssignment_1_1_1_0() { return cOpAssignment_1_1_1_0; }
		
		//"."
		public Keyword getOpFullStopKeyword_1_1_1_0_0() { return cOpFullStopKeyword_1_1_1_0_0; }
		
		//right=(AbstractRef | StringLiteral)
		public Assignment getRightAssignment_1_1_1_1() { return cRightAssignment_1_1_1_1; }
		
		//(AbstractRef | StringLiteral)
		public Alternatives getRightAlternatives_1_1_1_1_0() { return cRightAlternatives_1_1_1_1_0; }
		
		//AbstractRef
		public RuleCall getRightAbstractRefParserRuleCall_1_1_1_1_0_0() { return cRightAbstractRefParserRuleCall_1_1_1_1_0_0; }
		
		//StringLiteral
		public RuleCall getRightStringLiteralParserRuleCall_1_1_1_1_0_1() { return cRightStringLiteralParserRuleCall_1_1_1_1_0_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Action cArrayAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Assignment cExprsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprsExpressionListParserRuleCall_3_2_0 = (RuleCall)cExprsAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Action cPointAction_4_1 = (Action)cGroup_4.eContents().get(1);
		private final Assignment cLeftAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_4_2_0 = (RuleCall)cLeftAssignment_4_2.eContents().get(0);
		private final Assignment cOpAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final Keyword cOpCommaKeyword_4_3_0 = (Keyword)cOpAssignment_4_3.eContents().get(0);
		private final Assignment cRightAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_4_0 = (RuleCall)cRightAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cCommaKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cZAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cZExpressionParserRuleCall_4_5_1_0 = (RuleCall)cZAssignment_4_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		
		//Primary returns Expression:
		//    TerminalExpression |
		//    AbstractRef |
		//    '(' ExpressionList ')' |
		//    '[' {Array} exprs=ExpressionList? ']' |
		//    '{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression |
		//AbstractRef |
		//'(' ExpressionList ')' |
		//'[' {Array} exprs=ExpressionList? ']' |
		//'{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//AbstractRef
		public RuleCall getAbstractRefParserRuleCall_1() { return cAbstractRefParserRuleCall_1; }
		
		//'(' ExpressionList ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2_1() { return cExpressionListParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'[' {Array} exprs=ExpressionList? ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//{Array}
		public Action getArrayAction_3_1() { return cArrayAction_3_1; }
		
		//exprs=ExpressionList?
		public Assignment getExprsAssignment_3_2() { return cExprsAssignment_3_2; }
		
		//ExpressionList
		public RuleCall getExprsExpressionListParserRuleCall_3_2_0() { return cExprsExpressionListParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}'
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//{Point}
		public Action getPointAction_4_1() { return cPointAction_4_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_4_2() { return cLeftAssignment_4_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_4_2_0() { return cLeftExpressionParserRuleCall_4_2_0; }
		
		//op=','
		public Assignment getOpAssignment_4_3() { return cOpAssignment_4_3; }
		
		//','
		public Keyword getOpCommaKeyword_4_3_0() { return cOpCommaKeyword_4_3_0; }
		
		//right=Expression
		public Assignment getRightAssignment_4_4() { return cRightAssignment_4_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_4_0() { return cRightExpressionParserRuleCall_4_4_0; }
		
		//(',' z=Expression)?
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//','
		public Keyword getCommaKeyword_4_5_0() { return cCommaKeyword_4_5_0; }
		
		//z=Expression
		public Assignment getZAssignment_4_5_1() { return cZAssignment_4_5_1; }
		
		//Expression
		public RuleCall getZExpressionParserRuleCall_4_5_1_0() { return cZExpressionParserRuleCall_4_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_6() { return cRightCurlyBracketKeyword_4_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftActionRefParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeInfoParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionListParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function returns Expression:
		//    {Function} (left=ActionRef) (type=TypeInfo)? '(' right=ExpressionList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} (left=ActionRef) (type=TypeInfo)? '(' right=ExpressionList? ')'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//(left=ActionRef)
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//ActionRef
		public RuleCall getLeftActionRefParserRuleCall_1_0() { return cLeftActionRefParserRuleCall_1_0; }
		
		//(type=TypeInfo)?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeInfo
		public RuleCall getTypeTypeInfoParserRuleCall_2_0() { return cTypeTypeInfoParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//right=ExpressionList?
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ExpressionList
		public RuleCall getRightExpressionListParserRuleCall_4_0() { return cRightExpressionListParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ExpressionList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExprsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprsExpressionParserRuleCall_0_0_0 = (RuleCall)cExprsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExprsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExprsExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExprsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprsParameterParserRuleCall_1_0_0 = (RuleCall)cExprsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprsParameterParserRuleCall_1_1_1_0 = (RuleCall)cExprsAssignment_1_1_1.eContents().get(0);
		
		//ExpressionList:
		//    (exprs+=Expression (',' exprs+=Expression)*) | (exprs+=Parameter (',' exprs+=Parameter)*);
		@Override public ParserRule getRule() { return rule; }
		
		//(exprs+=Expression (',' exprs+=Expression)*) | (exprs+=Parameter (',' exprs+=Parameter)*)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(exprs+=Expression (',' exprs+=Expression)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//exprs+=Expression
		public Assignment getExprsAssignment_0_0() { return cExprsAssignment_0_0; }
		
		//Expression
		public RuleCall getExprsExpressionParserRuleCall_0_0_0() { return cExprsExpressionParserRuleCall_0_0_0; }
		
		//(',' exprs+=Expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//exprs+=Expression
		public Assignment getExprsAssignment_0_1_1() { return cExprsAssignment_0_1_1; }
		
		//Expression
		public RuleCall getExprsExpressionParserRuleCall_0_1_1_0() { return cExprsExpressionParserRuleCall_0_1_1_0; }
		
		//(exprs+=Parameter (',' exprs+=Parameter)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//exprs+=Parameter
		public Assignment getExprsAssignment_1_0() { return cExprsAssignment_1_0; }
		
		//Parameter
		public RuleCall getExprsParameterParserRuleCall_1_0_0() { return cExprsParameterParserRuleCall_1_0_0; }
		
		//(',' exprs+=Parameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//exprs+=Parameter
		public Assignment getExprsAssignment_1_1_1() { return cExprsAssignment_1_1_1; }
		
		//Parameter
		public RuleCall getExprsParameterParserRuleCall_1_1_1_0() { return cExprsParameterParserRuleCall_1_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBuiltInFacetKeyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cBuiltInFacetKeyAlternatives_1_0_0 = (Alternatives)cBuiltInFacetKeyAssignment_1_0.eContents().get(0);
		private final RuleCall cBuiltInFacetKeyFK_DefinitionParserRuleCall_1_0_0_0 = (RuleCall)cBuiltInFacetKeyAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cBuiltInFacetKeyFK_TypeParserRuleCall_1_0_0_1 = (RuleCall)cBuiltInFacetKeyAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cBuiltInFacetKeyFK_SpecialParserRuleCall_1_0_0_2 = (RuleCall)cBuiltInFacetKeyAlternatives_1_0_0.eContents().get(2);
		private final RuleCall cBuiltInFacetKeyFK_ActionParserRuleCall_1_0_0_3 = (RuleCall)cBuiltInFacetKeyAlternatives_1_0_0.eContents().get(3);
		private final RuleCall cBuiltInFacetKeyFK_VarParserRuleCall_1_0_0_4 = (RuleCall)cBuiltInFacetKeyAlternatives_1_0_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cLeftVariableRefParserRuleCall_1_1_0_0 = (RuleCall)cLeftAssignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Parameter returns Expression:
		//    {Parameter} ((builtInFacetKey=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var))
		//    |
		//    (left=VariableRef ':')) right=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} ((builtInFacetKey=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var))
		//|
		//(left=VariableRef ':')) right=Expression
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//((builtInFacetKey=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var))
		//   |
		//   (left=VariableRef ':'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(builtInFacetKey=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var))
		public Assignment getBuiltInFacetKeyAssignment_1_0() { return cBuiltInFacetKeyAssignment_1_0; }
		
		//(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var)
		public Alternatives getBuiltInFacetKeyAlternatives_1_0_0() { return cBuiltInFacetKeyAlternatives_1_0_0; }
		
		//FK_Definition
		public RuleCall getBuiltInFacetKeyFK_DefinitionParserRuleCall_1_0_0_0() { return cBuiltInFacetKeyFK_DefinitionParserRuleCall_1_0_0_0; }
		
		//FK_Type
		public RuleCall getBuiltInFacetKeyFK_TypeParserRuleCall_1_0_0_1() { return cBuiltInFacetKeyFK_TypeParserRuleCall_1_0_0_1; }
		
		//FK_Special
		public RuleCall getBuiltInFacetKeyFK_SpecialParserRuleCall_1_0_0_2() { return cBuiltInFacetKeyFK_SpecialParserRuleCall_1_0_0_2; }
		
		//FK_Action
		public RuleCall getBuiltInFacetKeyFK_ActionParserRuleCall_1_0_0_3() { return cBuiltInFacetKeyFK_ActionParserRuleCall_1_0_0_3; }
		
		//FK_Var
		public RuleCall getBuiltInFacetKeyFK_VarParserRuleCall_1_0_0_4() { return cBuiltInFacetKeyFK_VarParserRuleCall_1_0_0_4; }
		
		//(left=VariableRef ':')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//left=VariableRef
		public Assignment getLeftAssignment_1_1_0() { return cLeftAssignment_1_1_0; }
		
		//VariableRef
		public RuleCall getLeftVariableRefParserRuleCall_1_1_0_0() { return cLeftVariableRefParserRuleCall_1_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}
	public class AbstractRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.AbstractRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**------------------------------------------------------------------------
		//*  References
		//-------------------------------------------------------------------------*/
		//AbstractRef returns Expression:
		//    =>Function | VariableRef;
		@Override public ParserRule getRule() { return rule; }
		
		//=>Function | VariableRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=>Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
	}
	public class UnitRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.UnitRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefBuiltInUnitDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefBuiltInUnitDefinitionValid_IDParserRuleCall_1_0_1 = (RuleCall)cRefBuiltInUnitDefinitionCrossReference_1_0.eContents().get(1);
		
		//UnitRef returns Expression:
		//    {UnitName} ref=[BuiltInUnitDefinition|Valid_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitName} ref=[BuiltInUnitDefinition|Valid_ID]
		public Group getGroup() { return cGroup; }
		
		//{UnitName}
		public Action getUnitNameAction_0() { return cUnitNameAction_0; }
		
		//ref=[BuiltInUnitDefinition|Valid_ID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[BuiltInUnitDefinition|Valid_ID]
		public CrossReference getRefBuiltInUnitDefinitionCrossReference_1_0() { return cRefBuiltInUnitDefinitionCrossReference_1_0; }
		
		//Valid_ID
		public RuleCall getRefBuiltInUnitDefinitionValid_IDParserRuleCall_1_0_1() { return cRefBuiltInUnitDefinitionValid_IDParserRuleCall_1_0_1; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefVarDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefVarDefinitionValid_IDParserRuleCall_1_0_1 = (RuleCall)cRefVarDefinitionCrossReference_1_0.eContents().get(1);
		
		//VariableRef:
		//    {VariableRef} ref=[VarDefinition|Valid_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableRef} ref=[VarDefinition|Valid_ID]
		public Group getGroup() { return cGroup; }
		
		//{VariableRef}
		public Action getVariableRefAction_0() { return cVariableRefAction_0; }
		
		//ref=[VarDefinition|Valid_ID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[VarDefinition|Valid_ID]
		public CrossReference getRefVarDefinitionCrossReference_1_0() { return cRefVarDefinitionCrossReference_1_0; }
		
		//Valid_ID
		public RuleCall getRefVarDefinitionValid_IDParserRuleCall_1_0_1() { return cRefVarDefinitionValid_IDParserRuleCall_1_0_1; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cRefAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final CrossReference cRefTypeDefinitionCrossReference_0_1_0_0 = (CrossReference)cRefAssignment_0_1_0.eContents().get(0);
		private final RuleCall cRefTypeDefinitionIDTerminalRuleCall_0_1_0_0_1 = (RuleCall)cRefTypeDefinitionCrossReference_0_1_0_0.eContents().get(1);
		private final Assignment cParameterAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cParameterTypeInfoParserRuleCall_0_1_1_0 = (RuleCall)cParameterAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSpeciesKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParameterTypeInfoParserRuleCall_1_1_1_0 = (RuleCall)cParameterAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTypeRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cImageKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//TypeRef returns Expression:
		//    {TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?) | {TypeRef} ("species" parameter=TypeInfo) | {TypeRef}
		//    ("image");
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?) | {TypeRef} ("species" parameter=TypeInfo) | {TypeRef}
		//("image")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeRef}
		public Action getTypeRefAction_0_0() { return cTypeRefAction_0_0; }
		
		//(ref=[TypeDefinition|ID] parameter=TypeInfo?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ref=[TypeDefinition|ID]
		public Assignment getRefAssignment_0_1_0() { return cRefAssignment_0_1_0; }
		
		//[TypeDefinition|ID]
		public CrossReference getRefTypeDefinitionCrossReference_0_1_0_0() { return cRefTypeDefinitionCrossReference_0_1_0_0; }
		
		//ID
		public RuleCall getRefTypeDefinitionIDTerminalRuleCall_0_1_0_0_1() { return cRefTypeDefinitionIDTerminalRuleCall_0_1_0_0_1; }
		
		//parameter=TypeInfo?
		public Assignment getParameterAssignment_0_1_1() { return cParameterAssignment_0_1_1; }
		
		//TypeInfo
		public RuleCall getParameterTypeInfoParserRuleCall_0_1_1_0() { return cParameterTypeInfoParserRuleCall_0_1_1_0; }
		
		//{TypeRef} ("species" parameter=TypeInfo)
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeRef}
		public Action getTypeRefAction_1_0() { return cTypeRefAction_1_0; }
		
		//("species" parameter=TypeInfo)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"species"
		public Keyword getSpeciesKeyword_1_1_0() { return cSpeciesKeyword_1_1_0; }
		
		//parameter=TypeInfo
		public Assignment getParameterAssignment_1_1_1() { return cParameterAssignment_1_1_1; }
		
		//TypeInfo
		public RuleCall getParameterTypeInfoParserRuleCall_1_1_1_0() { return cParameterTypeInfoParserRuleCall_1_1_1_0; }
		
		//{TypeRef}
		//   ("image")
		public Group getGroup_2() { return cGroup_2; }
		
		//{TypeRef}
		public Action getTypeRefAction_2_0() { return cTypeRefAction_2_0; }
		
		//("image")
		public Keyword getImageKeyword_2_1() { return cImageKeyword_2_1; }
	}
	public class TypeInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.TypeInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstTypeRefParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSecondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSecondTypeRefParserRuleCall_2_1_0 = (RuleCall)cSecondAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		// // Necessary to add "image" hardcoded here, because of the existence of the "image" layer
		//TypeInfo:
		//    ('<' first=TypeRef ("," second=TypeRef)? ->'>');
		@Override public ParserRule getRule() { return rule; }
		
		//('<' first=TypeRef ("," second=TypeRef)? ->'>')
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//first=TypeRef
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//TypeRef
		public RuleCall getFirstTypeRefParserRuleCall_1_0() { return cFirstTypeRefParserRuleCall_1_0; }
		
		//("," second=TypeRef)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//second=TypeRef
		public Assignment getSecondAssignment_2_1() { return cSecondAssignment_2_1; }
		
		//TypeRef
		public RuleCall getSecondTypeRefParserRuleCall_2_1_0() { return cSecondTypeRefParserRuleCall_2_1_0; }
		
		//->'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class SkillRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.SkillRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkillRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefBuiltInSkillDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefBuiltInSkillDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cRefBuiltInSkillDefinitionCrossReference_1_0.eContents().get(1);
		
		//SkillRef returns Expression:
		//    {SkillRef} ref=[BuiltInSkillDefinition|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{SkillRef} ref=[BuiltInSkillDefinition|ID]
		public Group getGroup() { return cGroup; }
		
		//{SkillRef}
		public Action getSkillRefAction_0() { return cSkillRefAction_0; }
		
		//ref=[BuiltInSkillDefinition|ID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[BuiltInSkillDefinition|ID]
		public CrossReference getRefBuiltInSkillDefinitionCrossReference_1_0() { return cRefBuiltInSkillDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getRefBuiltInSkillDefinitionIDTerminalRuleCall_1_0_1() { return cRefBuiltInSkillDefinitionIDTerminalRuleCall_1_0_1; }
	}
	public class ActionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ActionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefActionDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefActionDefinitionValid_IDParserRuleCall_1_0_1 = (RuleCall)cRefActionDefinitionCrossReference_1_0.eContents().get(1);
		
		//ActionRef returns Expression:
		//    {ActionRef} ref=[ActionDefinition|Valid_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionRef} ref=[ActionDefinition|Valid_ID]
		public Group getGroup() { return cGroup; }
		
		//{ActionRef}
		public Action getActionRefAction_0() { return cActionRefAction_0; }
		
		//ref=[ActionDefinition|Valid_ID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[ActionDefinition|Valid_ID]
		public CrossReference getRefActionDefinitionCrossReference_1_0() { return cRefActionDefinitionCrossReference_1_0; }
		
		//Valid_ID
		public RuleCall getRefActionDefinitionValid_IDParserRuleCall_1_0_1() { return cRefActionDefinitionValid_IDParserRuleCall_1_0_1; }
	}
	public class EquationRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.EquationRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefEquationDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefEquationDefinitionValid_IDParserRuleCall_1_0_1 = (RuleCall)cRefEquationDefinitionCrossReference_1_0.eContents().get(1);
		
		//EquationRef returns Expression:
		//    {EquationRef} ref=[EquationDefinition|Valid_ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{EquationRef} ref=[EquationDefinition|Valid_ID]
		public Group getGroup() { return cGroup; }
		
		//{EquationRef}
		public Action getEquationRefAction_0() { return cEquationRefAction_0; }
		
		//ref=[EquationDefinition|Valid_ID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[EquationDefinition|Valid_ID]
		public CrossReference getRefEquationDefinitionCrossReference_1_0() { return cRefEquationDefinitionCrossReference_1_0; }
		
		//Valid_ID
		public RuleCall getRefEquationDefinitionValid_IDParserRuleCall_1_0_1() { return cRefEquationDefinitionValid_IDParserRuleCall_1_0_1; }
	}
	public class GamlDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.GamlDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuiltInUnitDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuiltInSkillDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActionDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEquationDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//GamlDefinition:
		//    TypeDefinition | VarDefinition | BuiltInUnitDefinition | BuiltInSkillDefinition | ActionDefinition | EquationDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDefinition | VarDefinition | BuiltInUnitDefinition | BuiltInSkillDefinition | ActionDefinition | EquationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }
		
		//VarDefinition
		public RuleCall getVarDefinitionParserRuleCall_1() { return cVarDefinitionParserRuleCall_1; }
		
		//BuiltInUnitDefinition
		public RuleCall getBuiltInUnitDefinitionParserRuleCall_2() { return cBuiltInUnitDefinitionParserRuleCall_2; }
		
		//BuiltInSkillDefinition
		public RuleCall getBuiltInSkillDefinitionParserRuleCall_3() { return cBuiltInSkillDefinitionParserRuleCall_3; }
		
		//ActionDefinition
		public RuleCall getActionDefinitionParserRuleCall_4() { return cActionDefinitionParserRuleCall_4; }
		
		//EquationDefinition
		public RuleCall getEquationDefinitionParserRuleCall_5() { return cEquationDefinitionParserRuleCall_5; }
	}
	public class EquationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.EquationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_EquationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInEquationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EquationDefinition:
		//    S_Equations | BuiltInEquationDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//S_Equations | BuiltInEquationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//S_Equations
		public RuleCall getS_EquationsParserRuleCall_0() { return cS_EquationsParserRuleCall_0; }
		
		//BuiltInEquationDefinition
		public RuleCall getBuiltInEquationDefinitionParserRuleCall_1() { return cBuiltInEquationDefinitionParserRuleCall_1; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_SpeciesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDefinition:
		//    S_Species | BuiltInTypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//S_Species | BuiltInTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//S_Species
		public RuleCall getS_SpeciesParserRuleCall_0() { return cS_SpeciesParserRuleCall_0; }
		
		//BuiltInTypeDefinition
		public RuleCall getBuiltInTypeDefinitionParserRuleCall_1() { return cBuiltInTypeDefinitionParserRuleCall_1; }
	}
	public class VarDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.VarDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_DeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cStandaloneModelParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgumentDefinitionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cF_DefinitionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cBuiltInVarDefinitionParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cImportParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cS_ExperimentParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		
		//VarDefinition:
		//    =>S_Declaration | (StandaloneModel | ArgumentDefinition | F_Definition | BuiltInVarDefinition | Import |
		//    S_Experiment);
		@Override public ParserRule getRule() { return rule; }
		
		//=>S_Declaration | (StandaloneModel | ArgumentDefinition | F_Definition | BuiltInVarDefinition | Import |
		//S_Experiment)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=>S_Declaration
		public RuleCall getS_DeclarationParserRuleCall_0() { return cS_DeclarationParserRuleCall_0; }
		
		//(StandaloneModel | ArgumentDefinition | F_Definition | BuiltInVarDefinition | Import |
		//   S_Experiment)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//StandaloneModel
		public RuleCall getStandaloneModelParserRuleCall_1_0() { return cStandaloneModelParserRuleCall_1_0; }
		
		//ArgumentDefinition
		public RuleCall getArgumentDefinitionParserRuleCall_1_1() { return cArgumentDefinitionParserRuleCall_1_1; }
		
		//F_Definition
		public RuleCall getF_DefinitionParserRuleCall_1_2() { return cF_DefinitionParserRuleCall_1_2; }
		
		//BuiltInVarDefinition
		public RuleCall getBuiltInVarDefinitionParserRuleCall_1_3() { return cBuiltInVarDefinitionParserRuleCall_1_3; }
		
		//Import
		public RuleCall getImportParserRuleCall_1_4() { return cImportParserRuleCall_1_4; }
		
		//S_Experiment
		public RuleCall getS_ExperimentParserRuleCall_1_5() { return cS_ExperimentParserRuleCall_1_5; }
	}
	public class ActionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ActionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_ActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInActionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cS_DefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ActionDefinition:
		//    S_Action | BuiltInActionDefinition | S_Definition | TypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//S_Action | BuiltInActionDefinition | S_Definition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//S_Action
		public RuleCall getS_ActionParserRuleCall_0() { return cS_ActionParserRuleCall_0; }
		
		//BuiltInActionDefinition
		public RuleCall getBuiltInActionDefinitionParserRuleCall_1() { return cBuiltInActionDefinitionParserRuleCall_1; }
		
		//S_Definition
		public RuleCall getS_DefinitionParserRuleCall_2() { return cS_DefinitionParserRuleCall_2; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_3() { return cTypeDefinitionParserRuleCall_3; }
	}
	public class BuiltInUnitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInUnitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Built_in Definitions produced by the global scope provider
		//-------------------------------------------------------------------------*/
		//BuiltInUnitDefinition:
		//    '**unit*' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**unit*' name=ID
		public Group getGroup() { return cGroup; }
		
		//'**unit*'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BuiltInTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BuiltInTypeDefinition:
		//    '**type*' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**type*' name=ID
		public Group getGroup() { return cGroup; }
		
		//'**type*'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BuiltInActionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInActionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BuiltInActionDefinition:
		//    '**action*' name=Valid_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**action*' name=Valid_ID
		public Group getGroup() { return cGroup; }
		
		//'**action*'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
	}
	public class BuiltInSkillDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInSkillDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BuiltInSkillDefinition:
		//    '**skill*' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**skill*' name=ID
		public Group getGroup() { return cGroup; }
		
		//'**skill*'
		public Keyword getSkillKeyword_0() { return cSkillKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BuiltInVarDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInVarDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BuiltInVarDefinition:
		//    '**var*' name=Valid_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**var*' name=Valid_ID
		public Group getGroup() { return cGroup; }
		
		//'**var*'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
	}
	public class BuiltInEquationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BuiltInEquationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValid_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BuiltInEquationDefinition:
		//    '**equation*' name=Valid_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'**equation*' name=Valid_ID
		public Group getGroup() { return cGroup; }
		
		//'**equation*'
		public Keyword getEquationKeyword_0() { return cEquationKeyword_0; }
		
		//name=Valid_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Valid_ID
		public RuleCall getNameValid_IDParserRuleCall_1_0() { return cNameValid_IDParserRuleCall_1_0; }
	}
	public class Valid_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.Valid_ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cK_SpeciesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cK_ImageLayerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cK_DoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cK_ReflexParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cK_VarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cK_1Expr_Facets_BlockOrEndParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cK_EquationsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cK_DefaultParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cK_ExperimentParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		///**------------------------------------------------------------------------
		// * Identifiers
		//-------------------------------------------------------------------------*/
		//Valid_ID:
		//    K_Species | K_ImageLayer | K_Do | K_Reflex | K_Var | K_1Expr_Facets_BlockOrEnd | K_Equations |
		//    ID | K_Default | K_Experiment;
		@Override public ParserRule getRule() { return rule; }
		
		//K_Species | K_ImageLayer | K_Do | K_Reflex | K_Var | K_1Expr_Facets_BlockOrEnd | K_Equations |
		//ID | K_Default | K_Experiment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//K_Species
		public RuleCall getK_SpeciesParserRuleCall_0() { return cK_SpeciesParserRuleCall_0; }
		
		//K_ImageLayer
		public RuleCall getK_ImageLayerParserRuleCall_1() { return cK_ImageLayerParserRuleCall_1; }
		
		//K_Do
		public RuleCall getK_DoParserRuleCall_2() { return cK_DoParserRuleCall_2; }
		
		//K_Reflex
		public RuleCall getK_ReflexParserRuleCall_3() { return cK_ReflexParserRuleCall_3; }
		
		//K_Var
		public RuleCall getK_VarParserRuleCall_4() { return cK_VarParserRuleCall_4; }
		
		//K_1Expr_Facets_BlockOrEnd
		public RuleCall getK_1Expr_Facets_BlockOrEndParserRuleCall_5() { return cK_1Expr_Facets_BlockOrEndParserRuleCall_5; }
		
		//K_Equations
		public RuleCall getK_EquationsParserRuleCall_6() { return cK_EquationsParserRuleCall_6; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_7() { return cIDTerminalRuleCall_7; }
		
		//K_Default
		public RuleCall getK_DefaultParserRuleCall_8() { return cK_DefaultParserRuleCall_8; }
		
		//K_Experiment
		public RuleCall getK_ExperimentParserRuleCall_9() { return cK_ExperimentParserRuleCall_9; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDoubleLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpDOUBLETerminalRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOpBOOLEANTerminalRuleCall_3_1_0 = (RuleCall)cOpAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cReservedLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOpKEYWORDTerminalRuleCall_4_1_0 = (RuleCall)cOpAssignment_4_1.eContents().get(0);
		
		///**------------------------------------------------------------------------
		// * Terminals
		//-------------------------------------------------------------------------*/
		//TerminalExpression:
		//    StringLiteral |
		//    {IntLiteral} op=INTEGER |
		//    {DoubleLiteral} op=DOUBLE |
		//    {BooleanLiteral} op=BOOLEAN |
		//    {ReservedLiteral} op=KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral |
		//{IntLiteral} op=INTEGER |
		//{DoubleLiteral} op=DOUBLE |
		//{BooleanLiteral} op=BOOLEAN |
		//{ReservedLiteral} op=KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//{IntLiteral} op=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_1_0() { return cIntLiteralAction_1_0; }
		
		//op=INTEGER
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//INTEGER
		public RuleCall getOpINTEGERTerminalRuleCall_1_1_0() { return cOpINTEGERTerminalRuleCall_1_1_0; }
		
		//{DoubleLiteral} op=DOUBLE
		public Group getGroup_2() { return cGroup_2; }
		
		//{DoubleLiteral}
		public Action getDoubleLiteralAction_2_0() { return cDoubleLiteralAction_2_0; }
		
		//op=DOUBLE
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//DOUBLE
		public RuleCall getOpDOUBLETerminalRuleCall_2_1_0() { return cOpDOUBLETerminalRuleCall_2_1_0; }
		
		//{BooleanLiteral} op=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }
		
		//op=BOOLEAN
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }
		
		//BOOLEAN
		public RuleCall getOpBOOLEANTerminalRuleCall_3_1_0() { return cOpBOOLEANTerminalRuleCall_3_1_0; }
		
		//{ReservedLiteral} op=KEYWORD
		public Group getGroup_4() { return cGroup_4; }
		
		//{ReservedLiteral}
		public Action getReservedLiteralAction_4_0() { return cReservedLiteralAction_4_0; }
		
		//op=KEYWORD
		public Assignment getOpAssignment_4_1() { return cOpAssignment_4_1; }
		
		//KEYWORD
		public RuleCall getOpKEYWORDTerminalRuleCall_4_1_0() { return cOpKEYWORDTerminalRuleCall_4_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.StringLiteral");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOpSTRINGTerminalRuleCall_0 = (RuleCall)cOpAssignment.eContents().get(0);
		
		//StringLiteral:
		//    op=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//op=STRING
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//STRING
		public RuleCall getOpSTRINGTerminalRuleCall_0() { return cOpSTRINGTerminalRuleCall_0; }
	}
	
	
	private final EntryElements pEntry;
	private final StandaloneBlockElements pStandaloneBlock;
	private final StandaloneExpressionElements pStandaloneExpression;
	private final StandaloneExperimentElements pStandaloneExperiment;
	private final StandaloneModelElements pStandaloneModel;
	private final ImportElements pImport;
	private final PragmaElements pPragma;
	private final BlockElements pBlock;
	private final B_ModelElements pB_Model;
	private final B_SwitchElements pB_Switch;
	private final B_DisplayElements pB_Display;
	private final StatementElements pStatement;
	private final S_1Expr_Facets_BlockOrEndElements pS_1Expr_Facets_BlockOrEnd;
	private final S_SectionElements pS_Section;
	private final S_GlobalElements pS_Global;
	private final S_SpeciesElements pS_Species;
	private final S_ExperimentElements pS_Experiment;
	private final S_DoElements pS_Do;
	private final S_LoopElements pS_Loop;
	private final S_IfElements pS_If;
	private final S_TryElements pS_Try;
	private final S_SwitchElements pS_Switch;
	private final S_MatchElements pS_Match;
	private final S_DefaultElements pS_Default;
	private final S_ReturnElements pS_Return;
	private final S_BreakElements pS_Break;
	private final S_DeclarationElements pS_Declaration;
	private final S_ReflexElements pS_Reflex;
	private final S_DefinitionElements pS_Definition;
	private final S_ActionElements pS_Action;
	private final S_VarElements pS_Var;
	private final S_AssignmentElements pS_Assignment;
	private final S_DirectAssignmentElements pS_DirectAssignment;
	private final S_SetElements pS_Set;
	private final S_EquationElements pS_Equation;
	private final S_EquationsElements pS_Equations;
	private final S_SolveElements pS_Solve;
	private final S_DisplayElements pS_Display;
	private final S_DisplayLayerElements pS_DisplayLayer;
	private final S_SpeciesLayerElements pS_SpeciesLayer;
	private final S_ImageLayerElements pS_ImageLayer;
	private final K_EquationsElements pK_Equations;
	private final K_SolveElements pK_Solve;
	private final K_SpeciesElements pK_Species;
	private final K_ImageLayerElements pK_ImageLayer;
	private final K_ExperimentElements pK_Experiment;
	private final K_1Expr_Facets_BlockOrEndElements pK_1Expr_Facets_BlockOrEnd;
	private final K_LayerElements pK_Layer;
	private final K_DoElements pK_Do;
	private final K_DefaultElements pK_Default;
	private final K_VarElements pK_Var;
	private final K_ReflexElements pK_Reflex;
	private final K_AssignmentElements pK_Assignment;
	private final ActionArgumentsElements pActionArguments;
	private final ArgumentDefinitionElements pArgumentDefinition;
	private final FacetElements pFacet;
	private final F_RegularElements pF_Regular;
	private final F_DefinitionElements pF_Definition;
	private final F_FunctionElements pF_Function;
	private final F_TypeElements pF_Type;
	private final F_ActionElements pF_Action;
	private final F_VarElements pF_Var;
	private final FK_RegularElements pFK_Regular;
	private final FK_DefinitionElements pFK_Definition;
	private final FK_TypeElements pFK_Type;
	private final FK_SpecialElements pFK_Special;
	private final FK_ActionElements pFK_Action;
	private final FK_VarElements pFK_Var;
	private final ExpressionElements pExpression;
	private final BinaryOperatorElements pBinaryOperator;
	private final ArgumentPairElements pArgumentPair;
	private final PairElements pPair;
	private final IfElements pIf;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final CastElements pCast;
	private final ComparisonElements pComparison;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final ExponentiationElements pExponentiation;
	private final BinaryElements pBinary;
	private final UnitElements pUnit;
	private final UnaryElements pUnary;
	private final AccessElements pAccess;
	private final PrimaryElements pPrimary;
	private final FunctionElements pFunction;
	private final ExpressionListElements pExpressionList;
	private final ParameterElements pParameter;
	private final AbstractRefElements pAbstractRef;
	private final UnitRefElements pUnitRef;
	private final VariableRefElements pVariableRef;
	private final TypeRefElements pTypeRef;
	private final TypeInfoElements pTypeInfo;
	private final SkillRefElements pSkillRef;
	private final ActionRefElements pActionRef;
	private final EquationRefElements pEquationRef;
	private final GamlDefinitionElements pGamlDefinition;
	private final EquationDefinitionElements pEquationDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final VarDefinitionElements pVarDefinition;
	private final ActionDefinitionElements pActionDefinition;
	private final BuiltInUnitDefinitionElements pBuiltInUnitDefinition;
	private final BuiltInTypeDefinitionElements pBuiltInTypeDefinition;
	private final BuiltInActionDefinitionElements pBuiltInActionDefinition;
	private final BuiltInSkillDefinitionElements pBuiltInSkillDefinition;
	private final BuiltInVarDefinitionElements pBuiltInVarDefinition;
	private final BuiltInEquationDefinitionElements pBuiltInEquationDefinition;
	private final Valid_IDElements pValid_ID;
	private final TerminalExpressionElements pTerminalExpression;
	private final StringLiteralElements pStringLiteral;
	private final TerminalRule tKEYWORD;
	private final TerminalRule tINTEGER;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public GamlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEntry = new EntryElements();
		this.pStandaloneBlock = new StandaloneBlockElements();
		this.pStandaloneExpression = new StandaloneExpressionElements();
		this.pStandaloneExperiment = new StandaloneExperimentElements();
		this.pStandaloneModel = new StandaloneModelElements();
		this.pImport = new ImportElements();
		this.pPragma = new PragmaElements();
		this.pBlock = new BlockElements();
		this.pB_Model = new B_ModelElements();
		this.pB_Switch = new B_SwitchElements();
		this.pB_Display = new B_DisplayElements();
		this.pStatement = new StatementElements();
		this.pS_1Expr_Facets_BlockOrEnd = new S_1Expr_Facets_BlockOrEndElements();
		this.pS_Section = new S_SectionElements();
		this.pS_Global = new S_GlobalElements();
		this.pS_Species = new S_SpeciesElements();
		this.pS_Experiment = new S_ExperimentElements();
		this.pS_Do = new S_DoElements();
		this.pS_Loop = new S_LoopElements();
		this.pS_If = new S_IfElements();
		this.pS_Try = new S_TryElements();
		this.pS_Switch = new S_SwitchElements();
		this.pS_Match = new S_MatchElements();
		this.pS_Default = new S_DefaultElements();
		this.pS_Return = new S_ReturnElements();
		this.pS_Break = new S_BreakElements();
		this.pS_Declaration = new S_DeclarationElements();
		this.pS_Reflex = new S_ReflexElements();
		this.pS_Definition = new S_DefinitionElements();
		this.pS_Action = new S_ActionElements();
		this.pS_Var = new S_VarElements();
		this.pS_Assignment = new S_AssignmentElements();
		this.pS_DirectAssignment = new S_DirectAssignmentElements();
		this.pS_Set = new S_SetElements();
		this.pS_Equation = new S_EquationElements();
		this.pS_Equations = new S_EquationsElements();
		this.pS_Solve = new S_SolveElements();
		this.pS_Display = new S_DisplayElements();
		this.pS_DisplayLayer = new S_DisplayLayerElements();
		this.pS_SpeciesLayer = new S_SpeciesLayerElements();
		this.pS_ImageLayer = new S_ImageLayerElements();
		this.pK_Equations = new K_EquationsElements();
		this.pK_Solve = new K_SolveElements();
		this.pK_Species = new K_SpeciesElements();
		this.pK_ImageLayer = new K_ImageLayerElements();
		this.pK_Experiment = new K_ExperimentElements();
		this.pK_1Expr_Facets_BlockOrEnd = new K_1Expr_Facets_BlockOrEndElements();
		this.pK_Layer = new K_LayerElements();
		this.pK_Do = new K_DoElements();
		this.pK_Default = new K_DefaultElements();
		this.pK_Var = new K_VarElements();
		this.pK_Reflex = new K_ReflexElements();
		this.pK_Assignment = new K_AssignmentElements();
		this.pActionArguments = new ActionArgumentsElements();
		this.pArgumentDefinition = new ArgumentDefinitionElements();
		this.pFacet = new FacetElements();
		this.pF_Regular = new F_RegularElements();
		this.pF_Definition = new F_DefinitionElements();
		this.pF_Function = new F_FunctionElements();
		this.pF_Type = new F_TypeElements();
		this.pF_Action = new F_ActionElements();
		this.pF_Var = new F_VarElements();
		this.pFK_Regular = new FK_RegularElements();
		this.pFK_Definition = new FK_DefinitionElements();
		this.pFK_Type = new FK_TypeElements();
		this.pFK_Special = new FK_SpecialElements();
		this.pFK_Action = new FK_ActionElements();
		this.pFK_Var = new FK_VarElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pArgumentPair = new ArgumentPairElements();
		this.pPair = new PairElements();
		this.pIf = new IfElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pCast = new CastElements();
		this.pComparison = new ComparisonElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pExponentiation = new ExponentiationElements();
		this.pBinary = new BinaryElements();
		this.pUnit = new UnitElements();
		this.pUnary = new UnaryElements();
		this.pAccess = new AccessElements();
		this.pPrimary = new PrimaryElements();
		this.pFunction = new FunctionElements();
		this.pExpressionList = new ExpressionListElements();
		this.pParameter = new ParameterElements();
		this.pAbstractRef = new AbstractRefElements();
		this.pUnitRef = new UnitRefElements();
		this.pVariableRef = new VariableRefElements();
		this.pTypeRef = new TypeRefElements();
		this.pTypeInfo = new TypeInfoElements();
		this.pSkillRef = new SkillRefElements();
		this.pActionRef = new ActionRefElements();
		this.pEquationRef = new EquationRefElements();
		this.pGamlDefinition = new GamlDefinitionElements();
		this.pEquationDefinition = new EquationDefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pVarDefinition = new VarDefinitionElements();
		this.pActionDefinition = new ActionDefinitionElements();
		this.pBuiltInUnitDefinition = new BuiltInUnitDefinitionElements();
		this.pBuiltInTypeDefinition = new BuiltInTypeDefinitionElements();
		this.pBuiltInActionDefinition = new BuiltInActionDefinitionElements();
		this.pBuiltInSkillDefinition = new BuiltInSkillDefinitionElements();
		this.pBuiltInVarDefinition = new BuiltInVarDefinitionElements();
		this.pBuiltInEquationDefinition = new BuiltInEquationDefinitionElements();
		this.pValid_ID = new Valid_IDElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pStringLiteral = new StringLiteralElements();
		this.tKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.KEYWORD");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.INTEGER");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ID");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.DOUBLE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "msi.gama.lang.gaml.Gaml.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("msi.gama.lang.gaml.Gaml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///**------------------------------------------------------------------------
	// * Entries of the grammar
	//-------------------------------------------------------------------------*/
	//Entry:
	//    ->StandaloneModel | StandaloneExpression | StandaloneBlock | StandaloneExperiment;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * StandaloneBlock -- allows to compile inline actions at runtime
	//-------------------------------------------------------------------------*/
	//StandaloneBlock:
	//    '__synthetic__' block=Block;
	public StandaloneBlockElements getStandaloneBlockAccess() {
		return pStandaloneBlock;
	}
	
	public ParserRule getStandaloneBlockRule() {
		return getStandaloneBlockAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * StandaloneExpression -- allows to compile inline expressions at runtime
	//-------------------------------------------------------------------------*/
	//StandaloneExpression:
	//    name=ID "<-" expr=Expression;
	public StandaloneExpressionElements getStandaloneExpressionAccess() {
		return pStandaloneExpression;
	}
	
	public ParserRule getStandaloneExpressionRule() {
		return getStandaloneExpressionAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * StandaloneExperiment -- allows to compile experiment files
	//-------------------------------------------------------------------------*/
	//StandaloneExperiment:
	//    key=K_Experiment name=(Valid_ID | STRING) ('model:' importURI=STRING)? (facets+=Facet)*
	//    (block=Block | ';');
	public StandaloneExperimentElements getStandaloneExperimentAccess() {
		return pStandaloneExperiment;
	}
	
	public ParserRule getStandaloneExperimentRule() {
		return getStandaloneExperimentAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * StandaloneModel -- allows to compile model files
	//-------------------------------------------------------------------------*/
	//StandaloneModel:
	//    (pragmas+=Pragma)* 'model' name=ID (imports+=Import)* block=B_Model;
	public StandaloneModelElements getStandaloneModelAccess() {
		return pStandaloneModel;
	}
	
	public ParserRule getStandaloneModelRule() {
		return getStandaloneModelAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Models' specific components: imports and pragmas
	//-------------------------------------------------------------------------*/
	//Import:
	//    'import' importURI=STRING ("as" name=Valid_ID)?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	// // must be named importURI
	//Pragma:
	//    '@' (name=ID ('[' plugins=ExpressionList? ']')?);
	public PragmaElements getPragmaAccess() {
		return pPragma;
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Blocks. An ordered list of statements inside curly brackets.
	// * Some are specialized and accept only certain statements
	// -------------------------------------------------------------------------*/
	//Block:
	//    {Block} '{' ((statements+=Statement)* '}');
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//B_Model returns Block:
	//    {Block} (statements+=(S_Section))*;
	public B_ModelElements getB_ModelAccess() {
		return pB_Model;
	}
	
	public ParserRule getB_ModelRule() {
		return getB_ModelAccess().getRule();
	}
	
	//B_Switch returns Block:
	//    {Block} '{' (statements+=(S_Default | S_Match))* '}';
	public B_SwitchElements getB_SwitchAccess() {
		return pB_Switch;
	}
	
	public ParserRule getB_SwitchRule() {
		return getB_SwitchAccess().getRule();
	}
	
	//B_Display returns Block:
	//    {Block} '{' (statements+=S_DisplayLayer)* '}';
	public B_DisplayElements getB_DisplayAccess() {
		return pB_Display;
	}
	
	public ParserRule getB_DisplayRule() {
		return getB_DisplayAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * General statements
	//-------------------------------------------------------------------------*/
	//Statement:
	//    (=> S_Declaration |
	//    ((=> S_Assignment |  S_Switch | S_Break | S_Do | S_Return | S_Solve | S_If | S_Try | S_1Expr_Facets_BlockOrEnd /*| S_Other */|  S_Equations)))
	//    | S_Display ;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//S_1Expr_Facets_BlockOrEnd returns Statement:
	//    key=K_1Expr_Facets_BlockOrEnd (expr=Expression) (facets+=Facet)* (block=Block | ";");
	public S_1Expr_Facets_BlockOrEndElements getS_1Expr_Facets_BlockOrEndAccess() {
		return pS_1Expr_Facets_BlockOrEnd;
	}
	
	public ParserRule getS_1Expr_Facets_BlockOrEndRule() {
		return getS_1Expr_Facets_BlockOrEndAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Global statements
	//-------------------------------------------------------------------------*/
	//S_Section returns Statement:
	//    S_Global | S_Species | S_Experiment;
	public S_SectionElements getS_SectionAccess() {
		return pS_Section;
	}
	
	public ParserRule getS_SectionRule() {
		return getS_SectionAccess().getRule();
	}
	
	//S_Global:
	//    key="global" (facets+=Facet)* (block=Block | ';');
	public S_GlobalElements getS_GlobalAccess() {
		return pS_Global;
	}
	
	public ParserRule getS_GlobalRule() {
		return getS_GlobalAccess().getRule();
	}
	
	//S_Species:
	//    key=K_Species name=ID (facets+=Facet)* (block=Block | ';');
	public S_SpeciesElements getS_SpeciesAccess() {
		return pS_Species;
	}
	
	public ParserRule getS_SpeciesRule() {
		return getS_SpeciesAccess().getRule();
	}
	
	//S_Experiment:
	//    key=K_Experiment name=(Valid_ID | STRING) (facets+=Facet)* (block=Block | ';');
	public S_ExperimentElements getS_ExperimentAccess() {
		return pS_Experiment;
	}
	
	public ParserRule getS_ExperimentRule() {
		return getS_ExperimentAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Special statements: do
	//-------------------------------------------------------------------------*/
	//S_Do:
	//    key=K_Do expr=AbstractRef (facets+=Facet)* (block=Block | ';');
	public S_DoElements getS_DoAccess() {
		return pS_Do;
	}
	
	public ParserRule getS_DoRule() {
		return getS_DoAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Control statements : loop, if, switch/match/default, try/catch, break, return
	//-------------------------------------------------------------------------*/
	//S_Loop:
	//    key="loop" (name=ID) (facets+=Facet)* block=Block;
	public S_LoopElements getS_LoopAccess() {
		return pS_Loop;
	}
	
	public ParserRule getS_LoopRule() {
		return getS_LoopAccess().getRule();
	}
	
	//S_If:
	//    key='if' expr=Expression block=Block (->'else' else=(S_If | Block))?;
	public S_IfElements getS_IfAccess() {
		return pS_If;
	}
	
	public ParserRule getS_IfRule() {
		return getS_IfAccess().getRule();
	}
	
	//S_Try:
	//    key='try' block=Block (->'catch' catch=Block)?;
	public S_TryElements getS_TryAccess() {
		return pS_Try;
	}
	
	public ParserRule getS_TryRule() {
		return getS_TryAccess().getRule();
	}
	
	//S_Switch:
	//    key='switch' expr=Expression block=B_Switch;
	public S_SwitchElements getS_SwitchAccess() {
		return pS_Switch;
	}
	
	public ParserRule getS_SwitchRule() {
		return getS_SwitchAccess().getRule();
	}
	
	//S_Match returns Statement:
	//    key=("match" | "match_one" | "match_between" | "match_regex") expr=Expression block=Block;
	public S_MatchElements getS_MatchAccess() {
		return pS_Match;
	}
	
	public ParserRule getS_MatchRule() {
		return getS_MatchAccess().getRule();
	}
	
	//S_Default returns Statement:
	//    key=K_Default block=Block;
	public S_DefaultElements getS_DefaultAccess() {
		return pS_Default;
	}
	
	public ParserRule getS_DefaultRule() {
		return getS_DefaultAccess().getRule();
	}
	
	//S_Return returns Statement:
	//    key='return' expr=Expression ';';
	public S_ReturnElements getS_ReturnAccess() {
		return pS_Return;
	}
	
	public ParserRule getS_ReturnRule() {
		return getS_ReturnAccess().getRule();
	}
	
	//S_Break returns Statement:
	//    key='break' ';';
	public S_BreakElements getS_BreakAccess() {
		return pS_Break;
	}
	
	public ParserRule getS_BreakRule() {
		return getS_BreakAccess().getRule();
	}
	
	////S_Other:
	////    key=ID (facets+=Facet)* (block=Block | ';');
	///**------------------------------------------------------------------------
	// * Declaration statements: reflexes, actions, variables...
	//-------------------------------------------------------------------------*/
	//S_Declaration:
	//    ->S_Definition | S_Species | S_Reflex | S_Action | S_Var | S_Loop;
	public S_DeclarationElements getS_DeclarationAccess() {
		return pS_Declaration;
	}
	
	public ParserRule getS_DeclarationRule() {
		return getS_DeclarationAccess().getRule();
	}
	
	//S_Reflex:
	//    key=K_Reflex (name=Valid_ID)?     ("when" ":" expr=Expression)? block=Block;
	public S_ReflexElements getS_ReflexAccess() {
		return pS_Reflex;
	}
	
	public ParserRule getS_ReflexRule() {
		return getS_ReflexAccess().getRule();
	}
	
	//S_Definition:
	//    tkey=(TypeRef) name=(Valid_ID | STRING) ('(' (args=ActionArguments) ')')? (facets+=Facet)*
	//    (block=Block | ';');
	public S_DefinitionElements getS_DefinitionAccess() {
		return pS_Definition;
	}
	
	public ParserRule getS_DefinitionRule() {
		return getS_DefinitionAccess().getRule();
	}
	
	//S_Action returns S_Definition:
	//    {S_Action} key="action" name=Valid_ID ('(' (args=ActionArguments) ')')? (facets+=Facet)*
	//    (block=Block | ';');
	public S_ActionElements getS_ActionAccess() {
		return pS_Action;
	}
	
	public ParserRule getS_ActionRule() {
		return getS_ActionAccess().getRule();
	}
	
	//S_Var returns S_Definition:
	//    {S_Var} key=K_Var name=Valid_ID (facets+=Facet)* ';';
	public S_VarElements getS_VarAccess() {
		return pS_Var;
	}
	
	public ParserRule getS_VarRule() {
		return getS_VarAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Assignment statements: <-, set, single equation
	//-------------------------------------------------------------------------*/
	//S_Assignment:
	//    S_DirectAssignment | S_Set;
	public S_AssignmentElements getS_AssignmentAccess() {
		return pS_Assignment;
	}
	
	public ParserRule getS_AssignmentRule() {
		return getS_AssignmentAccess().getRule();
	}
	
	//S_DirectAssignment:
	//    (expr=Expression key=(K_Assignment) value=Expression (facets+=Facet)*) ';';
	public S_DirectAssignmentElements getS_DirectAssignmentAccess() {
		return pS_DirectAssignment;
	}
	
	public ParserRule getS_DirectAssignmentRule() {
		return getS_DirectAssignmentAccess().getRule();
	}
	
	//S_Set:
	//    key="set" expr=Expression ("value:" | "<-") value=Expression ";";
	public S_SetElements getS_SetAccess() {
		return pS_Set;
	}
	
	public ParserRule getS_SetRule() {
		return getS_SetAccess().getRule();
	}
	
	//S_Equation returns S_Assignment:
	//    expr=(Function | VariableRef) key="=" value=Expression;
	public S_EquationElements getS_EquationAccess() {
		return pS_Equation;
	}
	
	public ParserRule getS_EquationRule() {
		return getS_EquationAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Equation statements: equations system, solve
	//-------------------------------------------------------------------------*/
	//S_Equations:
	//    key=K_Equations name=Valid_ID (facets+=Facet)* ('{' (equations+=S_Equation ';')* '}' | ';');
	public S_EquationsElements getS_EquationsAccess() {
		return pS_Equations;
	}
	
	public ParserRule getS_EquationsRule() {
		return getS_EquationsAccess().getRule();
	}
	
	//S_Solve:
	//    key=K_Solve expr=EquationRef (facets+=Facet)* (block=Block | ';');
	public S_SolveElements getS_SolveAccess() {
		return pS_Solve;
	}
	
	public ParserRule getS_SolveRule() {
		return getS_SolveAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Display statements: display & layers (species, grid, image)
	//-------------------------------------------------------------------------*/
	//S_Display:
	//    key="display" name=(Valid_ID | STRING) (facets+=Facet)* block=B_Display;
	public S_DisplayElements getS_DisplayAccess() {
		return pS_Display;
	}
	
	public ParserRule getS_DisplayRule() {
		return getS_DisplayAccess().getRule();
	}
	
	//S_DisplayLayer returns Statement:
	//    =>S_SpeciesLayer | (=>S_ImageLayer | Statement);
	public S_DisplayLayerElements getS_DisplayLayerAccess() {
		return pS_DisplayLayer;
	}
	
	public ParserRule getS_DisplayLayerRule() {
		return getS_DisplayLayerAccess().getRule();
	}
	
	//S_SpeciesLayer:
	//    key=K_Species expr=Expression (facets+=Facet)* (block=B_Display | ";");
	public S_SpeciesLayerElements getS_SpeciesLayerAccess() {
		return pS_SpeciesLayer;
	}
	
	public ParserRule getS_SpeciesLayerRule() {
		return getS_SpeciesLayerAccess().getRule();
	}
	
	//S_ImageLayer:
	//    key=K_ImageLayer expr=Expression (facets+=Facet)* ";";
	public S_ImageLayerElements getS_ImageLayerAccess() {
		return pS_ImageLayer;
	}
	
	public ParserRule getS_ImageLayerRule() {
		return getS_ImageLayerAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Keys of statements
	//-------------------------------------------------------------------------*/
	//K_Equations:
	//    "equation";
	public K_EquationsElements getK_EquationsAccess() {
		return pK_Equations;
	}
	
	public ParserRule getK_EquationsRule() {
		return getK_EquationsAccess().getRule();
	}
	
	//K_Solve:
	//    "solve";
	public K_SolveElements getK_SolveAccess() {
		return pK_Solve;
	}
	
	public ParserRule getK_SolveRule() {
		return getK_SolveAccess().getRule();
	}
	
	//K_Species:
	//    "species" | "grid";
	public K_SpeciesElements getK_SpeciesAccess() {
		return pK_Species;
	}
	
	public ParserRule getK_SpeciesRule() {
		return getK_SpeciesAccess().getRule();
	}
	
	//K_ImageLayer:
	//    "image";
	public K_ImageLayerElements getK_ImageLayerAccess() {
		return pK_ImageLayer;
	}
	
	public ParserRule getK_ImageLayerRule() {
		return getK_ImageLayerAccess().getRule();
	}
	
	//K_Experiment:
	//    "experiment";
	public K_ExperimentElements getK_ExperimentAccess() {
		return pK_Experiment;
	}
	
	public ParserRule getK_ExperimentRule() {
		return getK_ExperimentAccess().getRule();
	}
	
	//K_1Expr_Facets_BlockOrEnd:
	//    K_Layer | "ask" | "release" | "capture" | "create" | "write" | "error" | "warn" | "exception" | "save" | "assert"
	//    | "inspect" | "browse" | "restore" | "draw" | "using" | "put" | "add" | "remove" | "parameter"
	//    | "status" | "highlight" | "focus_on" | "layout";
	public K_1Expr_Facets_BlockOrEndElements getK_1Expr_Facets_BlockOrEndAccess() {
		return pK_1Expr_Facets_BlockOrEnd;
	}
	
	public ParserRule getK_1Expr_Facets_BlockOrEndRule() {
		return getK_1Expr_Facets_BlockOrEndAccess().getRule();
	}
	
	//K_Layer:
	//    "light" | "camera" | "text" | "image_layer" | "data" | "chart" | "agents" | "graphics" | "display_population" |
	//    "display_grid" | "event" | "overlay" | "datalist" | "mesh";
	public K_LayerElements getK_LayerAccess() {
		return pK_Layer;
	}
	
	public ParserRule getK_LayerRule() {
		return getK_LayerAccess().getRule();
	}
	
	//K_Do:
	//    "do" | "invoke";
	public K_DoElements getK_DoAccess() {
		return pK_Do;
	}
	
	public ParserRule getK_DoRule() {
		return getK_DoAccess().getRule();
	}
	
	//K_Default:
	//    "default";
	public K_DefaultElements getK_DefaultAccess() {
		return pK_Default;
	}
	
	public ParserRule getK_DefaultRule() {
		return getK_DefaultAccess().getRule();
	}
	
	//K_Var:
	//    "var" | "const" | "let" | "arg";
	public K_VarElements getK_VarAccess() {
		return pK_Var;
	}
	
	public ParserRule getK_VarRule() {
		return getK_VarAccess().getRule();
	}
	
	//K_Reflex:
	//    "init" | "reflex" | "aspect";
	public K_ReflexElements getK_ReflexAccess() {
		return pK_Reflex;
	}
	
	public ParserRule getK_ReflexRule() {
		return getK_ReflexAccess().getRule();
	}
	
	//K_Assignment:
	//    "<-" | "<<" | '>' '>' | "<<+" | '>' '>-' | "+<-" | "<+" | ">-";
	public K_AssignmentElements getK_AssignmentAccess() {
		return pK_Assignment;
	}
	
	public ParserRule getK_AssignmentRule() {
		return getK_AssignmentAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Parameters and arguments
	//-------------------------------------------------------------------------*/
	//ActionArguments:
	//    args+=ArgumentDefinition (',' args+=ArgumentDefinition)*;
	public ActionArgumentsElements getActionArgumentsAccess() {
		return pActionArguments;
	}
	
	public ParserRule getActionArgumentsRule() {
		return getActionArgumentsAccess().getRule();
	}
	
	//ArgumentDefinition:
	//    type=(TypeRef) name=Valid_ID ('<-' default=Expression)?;
	public ArgumentDefinitionElements getArgumentDefinitionAccess() {
		return pArgumentDefinition;
	}
	
	public ParserRule getArgumentDefinitionRule() {
		return getArgumentDefinitionAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Facets
	//-------------------------------------------------------------------------*/
	//Facet:
	//    F_Action | F_Definition | F_Regular | F_Type | F_Var | F_Function;
	public FacetElements getFacetAccess() {
		return pFacet;
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}
	
	//F_Regular returns Facet:
	//    (key=FK_Regular | key='<-' | key=FK_Special) expr=Expression;
	public F_RegularElements getF_RegularAccess() {
		return pF_Regular;
	}
	
	public ParserRule getF_RegularRule() {
		return getF_RegularAccess().getRule();
	}
	
	//F_Definition returns Facet:
	//    ((->key=FK_Definition) name=(Valid_ID | STRING));
	public F_DefinitionElements getF_DefinitionAccess() {
		return pF_Definition;
	}
	
	public ParserRule getF_DefinitionRule() {
		return getF_DefinitionAccess().getRule();
	}
	
	//F_Function returns Facet:
	//    key='->' (=>(expr=Expression) | ('{' expr=Expression '}'));
	public F_FunctionElements getF_FunctionAccess() {
		return pF_Function;
	}
	
	public ParserRule getF_FunctionRule() {
		return getF_FunctionAccess().getRule();
	}
	
	//F_Type returns Facet:
	//    key=FK_Type (->(expr=TypeRef) | expr=Expression);
	public F_TypeElements getF_TypeAccess() {
		return pF_Type;
	}
	
	public ParserRule getF_TypeRule() {
		return getF_TypeAccess().getRule();
	}
	
	//F_Action returns Facet:
	//    key=FK_Action (expr=ActionRef | block=Block);
	public F_ActionElements getF_ActionAccess() {
		return pF_Action;
	}
	
	public ParserRule getF_ActionRule() {
		return getF_ActionAccess().getRule();
	}
	
	//F_Var returns Facet:
	//    key=FK_Var expr=VariableRef;
	public F_VarElements getF_VarAccess() {
		return pF_Var;
	}
	
	public ParserRule getF_VarRule() {
		return getF_VarAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Facet keys
	//-------------------------------------------------------------------------*/
	////FirstFacetKey:
	////    DefinitionFacetKey | TypeFacetKey | SpecialFacetKey | VarFacetKey | ActionFacetKey | ClassicFacetKey;
	//FK_Regular:
	//    (ID ':');
	public FK_RegularElements getFK_RegularAccess() {
		return pFK_Regular;
	}
	
	public ParserRule getFK_RegularRule() {
		return getFK_RegularAccess().getRule();
	}
	
	//FK_Definition:
	//    "name:" | "returns:";
	public FK_DefinitionElements getFK_DefinitionAccess() {
		return pFK_Definition;
	}
	
	public ParserRule getFK_DefinitionRule() {
		return getFK_DefinitionAccess().getRule();
	}
	
	//FK_Type:
	//    ("as:" | "of:" | "parent:" | "species:" | "type:");
	public FK_TypeElements getFK_TypeAccess() {
		return pFK_Type;
	}
	
	public ParserRule getFK_TypeRule() {
		return getFK_TypeAccess().getRule();
	}
	
	//FK_Special:
	//    'camera:' | 'data:' | 'when' ':' | "const:" | "value:" | "topology:" | "item:" | "init:" | "message:" | "control:" |
	//    "layout:" | "environment:" | 'text:' | 'image:' | 'using:' | "parameter:" | "aspect:" | "light:";
	public FK_SpecialElements getFK_SpecialAccess() {
		return pFK_Special;
	}
	
	public ParserRule getFK_SpecialRule() {
		return getFK_SpecialAccess().getRule();
	}
	
	//FK_Action:
	//    "action:" | "on_change:";
	public FK_ActionElements getFK_ActionAccess() {
		return pFK_Action;
	}
	
	public ParserRule getFK_ActionRule() {
		return getFK_ActionAccess().getRule();
	}
	
	//FK_Var:
	//    "var:";
	public FK_VarElements getFK_VarAccess() {
		return pFK_Var;
	}
	
	public ParserRule getFK_VarRule() {
		return getFK_VarAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Expressions
	//-------------------------------------------------------------------------*/
	//Expression:
	//    ArgumentPair | Pair;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryOperator returns Expression:
	//    Or | And | Cast | Comparison | Addition | Multiplication | Exponentiation | Binary | Pair | Unit;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//ArgumentPair:
	//    => (op=(Valid_ID) '::' | op=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var) ':'
	//    )? right=Pair;
	public ArgumentPairElements getArgumentPairAccess() {
		return pArgumentPair;
	}
	
	public ParserRule getArgumentPairRule() {
		return getArgumentPairAccess().getRule();
	}
	
	//Pair returns Expression:
	//    If
	//    ({BinaryOperator.left=current}
	//    op='::'
	//    right=If)?;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//If returns Expression:
	//    Or
	//    ({If.left=current}
	//    op='?'
	//    right=Or
	//    (':'
	//    ifFalse=Or))?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Or returns Expression:
	//    And
	//    ({BinaryOperator.left=current}
	//    op='or'
	//    right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns Expression:
	//    Cast
	//    ({BinaryOperator.left=current}
	//    op='and'
	//    right=Cast)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Cast returns Expression:
	//    Comparison
	//    (({BinaryOperator.left=current}
	//    op='as') ((right=TypeRef) | ('(' right=TypeRef ')')))?;
	public CastElements getCastAccess() {
		return pCast;
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    Addition
	//    (({BinaryOperator.left=current}
	//    op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
	//    right=Addition)?;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Addition returns Expression:
	//    Multiplication
	//    (({BinaryOperator.left=current} op=('+' | '-'))
	//    right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    Exponentiation
	//    (({BinaryOperator.left=current} op=('*' | '/')) right=Exponentiation)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Exponentiation returns Expression:
	//    Binary
	//    (({BinaryOperator.left=current} op=('^')) right=Binary)*;
	public ExponentiationElements getExponentiationAccess() {
		return pExponentiation;
	}
	
	public ParserRule getExponentiationRule() {
		return getExponentiationAccess().getRule();
	}
	
	//Binary returns Expression:
	//    Unit
	//    (({BinaryOperator.left=current} op=(Valid_ID)) right=Unit)*;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//Unit returns Expression:
	//    Unary
	//    (({Unit.left=current} op=('°' | "#")) right=UnitRef)?;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Unary returns Expression:
	//    Access |
	//    {Unary} ((op=('°' | '#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
	//    right=Unary));
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Access returns Expression:
	//    Primary ({Access.left=current} ((op='[' right=ExpressionList? ']') | (op="." right=(AbstractRef | StringLiteral))))*;
	public AccessElements getAccessAccess() {
		return pAccess;
	}
	
	public ParserRule getAccessRule() {
		return getAccessAccess().getRule();
	}
	
	//Primary returns Expression:
	//    TerminalExpression |
	//    AbstractRef |
	//    '(' ExpressionList ')' |
	//    '[' {Array} exprs=ExpressionList? ']' |
	//    '{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Function returns Expression:
	//    {Function} (left=ActionRef) (type=TypeInfo)? '(' right=ExpressionList? ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//ExpressionList:
	//    (exprs+=Expression (',' exprs+=Expression)*) | (exprs+=Parameter (',' exprs+=Parameter)*);
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//Parameter returns Expression:
	//    {Parameter} ((builtInFacetKey=(FK_Definition | FK_Type | FK_Special | FK_Action | FK_Var))
	//    |
	//    (left=VariableRef ':')) right=Expression;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	//*  References
	//-------------------------------------------------------------------------*/
	//AbstractRef returns Expression:
	//    =>Function | VariableRef;
	public AbstractRefElements getAbstractRefAccess() {
		return pAbstractRef;
	}
	
	public ParserRule getAbstractRefRule() {
		return getAbstractRefAccess().getRule();
	}
	
	//UnitRef returns Expression:
	//    {UnitName} ref=[BuiltInUnitDefinition|Valid_ID];
	public UnitRefElements getUnitRefAccess() {
		return pUnitRef;
	}
	
	public ParserRule getUnitRefRule() {
		return getUnitRefAccess().getRule();
	}
	
	//VariableRef:
	//    {VariableRef} ref=[VarDefinition|Valid_ID];
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//TypeRef returns Expression:
	//    {TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?) | {TypeRef} ("species" parameter=TypeInfo) | {TypeRef}
	//    ("image");
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	// // Necessary to add "image" hardcoded here, because of the existence of the "image" layer
	//TypeInfo:
	//    ('<' first=TypeRef ("," second=TypeRef)? ->'>');
	public TypeInfoElements getTypeInfoAccess() {
		return pTypeInfo;
	}
	
	public ParserRule getTypeInfoRule() {
		return getTypeInfoAccess().getRule();
	}
	
	//SkillRef returns Expression:
	//    {SkillRef} ref=[BuiltInSkillDefinition|ID];
	public SkillRefElements getSkillRefAccess() {
		return pSkillRef;
	}
	
	public ParserRule getSkillRefRule() {
		return getSkillRefAccess().getRule();
	}
	
	//ActionRef returns Expression:
	//    {ActionRef} ref=[ActionDefinition|Valid_ID];
	public ActionRefElements getActionRefAccess() {
		return pActionRef;
	}
	
	public ParserRule getActionRefRule() {
		return getActionRefAccess().getRule();
	}
	
	//EquationRef returns Expression:
	//    {EquationRef} ref=[EquationDefinition|Valid_ID];
	public EquationRefElements getEquationRefAccess() {
		return pEquationRef;
	}
	
	public ParserRule getEquationRefRule() {
		return getEquationRefAccess().getRule();
	}
	
	//GamlDefinition:
	//    TypeDefinition | VarDefinition | BuiltInUnitDefinition | BuiltInSkillDefinition | ActionDefinition | EquationDefinition;
	public GamlDefinitionElements getGamlDefinitionAccess() {
		return pGamlDefinition;
	}
	
	public ParserRule getGamlDefinitionRule() {
		return getGamlDefinitionAccess().getRule();
	}
	
	//EquationDefinition:
	//    S_Equations | BuiltInEquationDefinition;
	public EquationDefinitionElements getEquationDefinitionAccess() {
		return pEquationDefinition;
	}
	
	public ParserRule getEquationDefinitionRule() {
		return getEquationDefinitionAccess().getRule();
	}
	
	//TypeDefinition:
	//    S_Species | BuiltInTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//VarDefinition:
	//    =>S_Declaration | (StandaloneModel | ArgumentDefinition | F_Definition | BuiltInVarDefinition | Import |
	//    S_Experiment);
	public VarDefinitionElements getVarDefinitionAccess() {
		return pVarDefinition;
	}
	
	public ParserRule getVarDefinitionRule() {
		return getVarDefinitionAccess().getRule();
	}
	
	//ActionDefinition:
	//    S_Action | BuiltInActionDefinition | S_Definition | TypeDefinition;
	public ActionDefinitionElements getActionDefinitionAccess() {
		return pActionDefinition;
	}
	
	public ParserRule getActionDefinitionRule() {
		return getActionDefinitionAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Built_in Definitions produced by the global scope provider
	//-------------------------------------------------------------------------*/
	//BuiltInUnitDefinition:
	//    '**unit*' name=ID;
	public BuiltInUnitDefinitionElements getBuiltInUnitDefinitionAccess() {
		return pBuiltInUnitDefinition;
	}
	
	public ParserRule getBuiltInUnitDefinitionRule() {
		return getBuiltInUnitDefinitionAccess().getRule();
	}
	
	//BuiltInTypeDefinition:
	//    '**type*' name=ID;
	public BuiltInTypeDefinitionElements getBuiltInTypeDefinitionAccess() {
		return pBuiltInTypeDefinition;
	}
	
	public ParserRule getBuiltInTypeDefinitionRule() {
		return getBuiltInTypeDefinitionAccess().getRule();
	}
	
	//BuiltInActionDefinition:
	//    '**action*' name=Valid_ID;
	public BuiltInActionDefinitionElements getBuiltInActionDefinitionAccess() {
		return pBuiltInActionDefinition;
	}
	
	public ParserRule getBuiltInActionDefinitionRule() {
		return getBuiltInActionDefinitionAccess().getRule();
	}
	
	//BuiltInSkillDefinition:
	//    '**skill*' name=ID;
	public BuiltInSkillDefinitionElements getBuiltInSkillDefinitionAccess() {
		return pBuiltInSkillDefinition;
	}
	
	public ParserRule getBuiltInSkillDefinitionRule() {
		return getBuiltInSkillDefinitionAccess().getRule();
	}
	
	//BuiltInVarDefinition:
	//    '**var*' name=Valid_ID;
	public BuiltInVarDefinitionElements getBuiltInVarDefinitionAccess() {
		return pBuiltInVarDefinition;
	}
	
	public ParserRule getBuiltInVarDefinitionRule() {
		return getBuiltInVarDefinitionAccess().getRule();
	}
	
	//BuiltInEquationDefinition:
	//    '**equation*' name=Valid_ID;
	public BuiltInEquationDefinitionElements getBuiltInEquationDefinitionAccess() {
		return pBuiltInEquationDefinition;
	}
	
	public ParserRule getBuiltInEquationDefinitionRule() {
		return getBuiltInEquationDefinitionAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Identifiers
	//-------------------------------------------------------------------------*/
	//Valid_ID:
	//    K_Species | K_ImageLayer | K_Do | K_Reflex | K_Var | K_1Expr_Facets_BlockOrEnd | K_Equations |
	//    ID | K_Default | K_Experiment;
	public Valid_IDElements getValid_IDAccess() {
		return pValid_ID;
	}
	
	public ParserRule getValid_IDRule() {
		return getValid_IDAccess().getRule();
	}
	
	///**------------------------------------------------------------------------
	// * Terminals
	//-------------------------------------------------------------------------*/
	//TerminalExpression:
	//    StringLiteral |
	//    {IntLiteral} op=INTEGER |
	//    {DoubleLiteral} op=DOUBLE |
	//    {BooleanLiteral} op=BOOLEAN |
	//    {ReservedLiteral} op=KEYWORD;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//StringLiteral:
	//    op=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//terminal KEYWORD:
	//    'each' | 'self' | 'myself' | 'nil' | 'super';
	public TerminalRule getKEYWORDRule() {
		return tKEYWORD;
	}
	
	//terminal INTEGER:
	//    '0' | ('1'..'9' ('0'..'9')*);
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal BOOLEAN:
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//    "2d" | "3d" | "2D" | "3D" | (('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '$' | '0'..'9')*);
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal DOUBLE:
	//    '1'..'9' ('0'..'9')* ('.' '0'..'9'+)? (('E' | 'e') ('+' | '-')? '0'..'9'+)? | '0' ('.' '0'..'9'+)? (('E' | 'e') ('+'
	//    | '-')? '0'..'9'+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal STRING:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f'
	//    | 'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//    '/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//    '//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//    .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
